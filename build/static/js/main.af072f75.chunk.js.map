{"version":3,"sources":["interfaces.ts","image/mini-logo-white.svg","image/logo.svg","components/Buttons.tsx","utils/loggedUser.ts","components/Login.tsx","image/mini-logo.svg","components/LeftNav.tsx","components/GenericTable.tsx","components/common/PatientsTable.tsx","actions/patient.ts","actions/questionaire.ts","reducers/patient.ts","reducers/questionaire.ts","components/common/PatientForm.tsx","components/physician/PhysicianPage.tsx","components/admin/ClinicsTable.tsx","hooks/useAuth.ts","components/admin/ClinicForm.tsx","actions/term.ts","reducers/term.ts","components/admin/Settings.tsx","actions/clinic.ts","reducers/clinic.ts","components/admin/AdminPage.tsx","components/manager/UsersTable.tsx","actions/user.ts","reducers/user.ts","components/manager/UserForm.tsx","components/manager/ManagerPage.tsx","components/patient/OnBoard.tsx","image/onboard-step-1.svg","image/onboard-step-2.svg","image/onboard-step-3.svg","components/patient/EPC.tsx","components/patient/QuestionaireList.tsx","image/logo-white.svg","components/patient/DN4.tsx","components/patient/OSWESTRY.tsx","components/patient/PatientPage.tsx","components/receptionist/ReceptionistPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["LoginPanelType","AdminPanelType","PhysicianPanelType","ReceptionistPanelType","ManagerPanelType","PatientPanel","RolesEnum","ADMIN","MANAGER","PHYSICIAN","RECEPTIONIST","PATIENT","QUESTIONAIRE_LIST","value","label","OutlinedButton","withStyles","theme","root","color","backgroundColor","border","maxWidth","margin","spacing","Button","OrangeButton","palette","getContrastText","deepOrange","baseUrl","AuthContext","createContext","token","getAuth","JSON","parse","localStorage","getItem","useStyles","makeStyles","createStyles","flexGrow","loginPatient","height","paperLoginPatient","width","gridLoginPatient","padding","left","justifyContent","alignItems","display","right","paper","boxShadow","contentBox","centralize","textAlign","marginBottom","marginTop","input","termsAndPolicy","fontSize","link","textDecoration","alignRight","forgotLink","loginUser","credentials","a","fetch","method","headers","body","stringify","then","data","json","tax_id","clinicId","DefaultButton","textTransform","LoginPatientButton","green","InitialPanel","props","classes","preventDefault","event","Paper","className","clsx","Grid","container","item","xs","src","logo","alt","Typography","variant","gutterBottom","onClick","nextPanel","size","Link","href","LoginPanel","useContext","setAuth","useState","email","setEmail","password","setPassword","history","useHistory","location","useLocation","handleLoginSubmit","e","state","from","pathname","replace","onSubmit","TextField","fullWidth","id","onChange","target","type","ForgotPasswordPanel","setEmailForgotPsw","handleForgotPswSubmit","taxId","setTaxId","clinic_id","useParams","Number","component","align","Login","Initial","panel","setPanel","isPatient","Slide","in","direction","mountOnEnter","unmountOnExit","minilogo","ForgotPassword","drawerWidth","appBar","zIndex","drawer","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","enteringScreen","menuButton","hide","flexShrink","whiteSpace","drawerOpen","drawerClose","overflowX","breakpoints","up","collapsedToolbar","paddingLeft","toolbar","mixins","content","bottomButton","search","position","borderRadius","shape","alpha","common","white","marginRight","searchIcon","pointerEvents","inputRoot","inputInput","LeftNav","useTheme","open","setOpen","role","currentPanel","AppBar","Toolbar","IconButton","edge","InputBase","placeholder","inputProps","Drawer","Divider","List","ListItem","button","selected","ClinicsTable","ClinicForm","includes","openClinicsTablePage","ListItemIcon","ListItemText","primary","Settings","openTermsOfUsePage","UsersTable","PatientsTable","push","maxHeight","tableHeadCell","black","tableHeadCheckbox","React","page","setPage","rowsPerPage","setRowsPerPage","setSelected","columns","rows","TableContainer","Table","stickyHeader","TableHead","TableRow","TableCell","Checkbox","indeterminate","length","checked","newSelecteds","map","n","column","style","minWidth","TableBody","slice","row","index","isItemSelected","indexOf","labelId","hover","tabIndex","cpf","selectedIndex","newSelected","concat","handleClick","format","TablePagination","rowsPerPageOptions","count","onPageChange","newPage","onRowsPerPageChange","toString","padStart","regex","arg1","arg2","arg3","arg4","setRows","deletePatient","openPatientForm","patients","useEffect","patient","handlePatientDetails","stopPropagation","handleDeletePatient","details","setPatientsIntoTable","IActions","getPatients","dispatch","Authorization","response","PATIENTS_FETCHED","ok","PATIENT_DELETED","createPatient","PATIENT_CREATED","updatePatient","PATIENT_UPDATED","patientReducer","action","filter","getQuestionaires","patient_id","QUESTIONAIRES_FETCHED","questionaires","forms","sendQuestionaires","QUESTIONAIRES_SENT","clearQuestionaires","questionaireReducer","headerSection","ownerHeaderSection","footerSection","PatientForm","currentPatient","setPatient","name","patientName","setPatientName","phone","setPhone","birthdate","setBirthdate","gender","setGender","physician_id","physicianId","setPhysicianId","setQuestionaires","handleSetPatient","patientPayload","handleCheckboxOnChange","q","alignContent","defaultValue","disabled","FormControl","InputLabel","htmlFor","Select","native","FormGroup","FormControlLabel","control","openPatientsTablePage","appRoot","PhysicianPage","ClinicStatus","setCurrentPatient","useReducer","questionairesDispatch","questionairePayload","newPatient","CssBaseline","useAuth","tokenString","auth","userAuth","setItem","removeItem","clinics","deleteClinic","openClinicForm","clinic","handleClinicDetails","handleDeleteClinic","status","setClinicsIntoTable","currentClinic","setClinic","clinicName","setClinicName","address_zipcode","zipcode","setZipcode","address_street","streetAddress","setStreetAddress","address_city","city","setCity","address_state","stateAddress","setStateAddress","owner","ownerName","setOwnerName","ownerEmail","setOwnerEmail","ownerPassword","setOwnerPassword","handleSetClinic","payload","user","setTermsOfUse","text","TERMS_UPDATED","terms","termsReducer","TERMS_FETCHED","textarea","tou","term","getTermsOfUse","handleSetTerms","TextareaAutosize","minRows","createClinic","CLINIC_CREATED","updateClinic","CLINIC_UPDATED","clinicReducer","CLINICS_FETCHED","CLINIC_DELETED","AdminPage","setCurrentClinic","getClinics","deleteUser","openUserForm","users","handleUserDetails","handleDeleteUser","setUsersIntoTable","createUser","USER_CREATED","updateUser","USER_UPDATED","userReducer","USERS_FETCHED","USER_DELETED","roleOptions","UserForm","currentUser","setUser","userName","setUserName","crm","setCrm","currentRole","roles","Array","isArray","setRole","handleSetUser","roleOption","openUsersTablePage","ManagerPage","setCurrentUser","usersDispatch","patientDispatch","getUsers","tourSteps","title","imgPath","onboard","paddingTop","tourTitle","tourLabel","img","overflow","greenColor","OnBoard","activeStep","setActiveStep","maxSteps","setHasOnboardedToTrue","square","elevation","MobileStepper","steps","nextButton","prevActiveStep","KeyboardArrowRight","backButton","KeyboardArrowLeft","EPCAppBar","EPCTitle","EPCBodyContent","EPCSlider","EPCForm","EPCFormItem","sliderSubLabel","lineHeight","EPCFooter","EPCReferenceInfo","grey","questions","answers","goToQuestionaire","Accept","EPC","EPCFormPanel","DESCRIPTION","currentEPCPanel","setCurrentEPCPanel","setAnswers","marks","colorPrimary","setCurrentPanel","INITIAL","ArrowBack","FORM","question","Slider","step","valueLabelDisplay","min","max","v","newAnswers","postEPCAnswers","patientAuth","BannerPanelType","logoWhite","profileMenu","profileButton","expandIcon","top","expandIconProfile","questionaireList","textField","BannerMenu","Description","Accordion","defaultExpanded","AccordionSummary","patientInfo","AccordionDetails","Profile","QuestionaireList","getQuestionairesForPatient","mainColor","bodyContent","form","formItem","footer","referenceInfo","progressBarRoot","progressBarLine","sections","subtitle","getRealIndex","questionIndex","sectionIndex","reduce","acc","i","DN4","LinearProgress","bar","qIndex","section","sIndex","FormLabel","RadioGroup","handleChange","Radio","postDN4Answers","some","s","undefined","formLabel","alternatives","OSWESTRY","alternative","aIndex","postOSWAnswers","PatientPage","hasGoneOnboard","getHasOnboardedLocalStorage","hasOnboarded","setHasOnboarded","isOnboard","ReceptionistPage","App","defaultPath","PrivateRoute","children","rest","render","path","to","Provider","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.af072f75.chunk.js","sourcesContent":["import { Clinic } from './models/Clinic';\r\nimport { Patient } from './models/Patient';\r\nimport { User } from './models/User';\r\nimport { LoggedPatient, UserAuth } from './models/UserAuth';\r\nexport interface TableColumn<K extends string = string> {\r\n  id: K;\r\n  label: string;\r\n  minWidth?: number;\r\n  format?: (value: number) => string;\r\n}\r\n\r\nexport type TableRow<K extends string = string, T = any> = Record<K, T>;\r\n\r\nexport interface TableProps<K extends string = string, L extends K = K> {\r\n  columns: TableColumn<L>[];\r\n  rows: TableRow<K>[];\r\n}\r\n\r\nexport interface PanelCommonProps {\r\n  nextPanel: () => void;\r\n}\r\n\r\nexport interface PatientTableColumn {\r\n  id:\r\n    | 'name'\r\n    | 'email'\r\n    | 'tax_id'\r\n    | 'phone'\r\n    | 'birthdate'\r\n    | 'gender'\r\n    | 'physician_id'\r\n    | 'details';\r\n  label: string;\r\n  minWidth?: number;\r\n  format?: (value: number) => string;\r\n}\r\n\r\nexport interface PatientTableData extends Patient {\r\n  details?: JSX.Element;\r\n}\r\n\r\nexport interface ClinicTableColumn {\r\n  id:\r\n    | 'id'\r\n    | 'name'\r\n    | 'tax_id'\r\n    | 'address_zipcode'\r\n    | 'address_street'\r\n    | 'address_city'\r\n    | 'address_state'\r\n    | 'phone'\r\n    | 'owner_id'\r\n    | 'status'\r\n    | 'details';\r\n  label: string;\r\n  minWidth?: number;\r\n  format?: (value: number) => string;\r\n}\r\n\r\nexport interface ClinicTableData extends Clinic {\r\n  details?: JSX.Element;\r\n}\r\n\r\nexport interface UserTableColumn {\r\n  id:\r\n    | 'id'\r\n    | 'name'\r\n    | 'tax_id'\r\n    | 'email'\r\n    | 'address_zipcode'\r\n    | 'address_street'\r\n    | 'address_city'\r\n    | 'address_state'\r\n    | 'crm'\r\n    | 'phone'\r\n    | 'role'\r\n    | 'details';\r\n  label: string;\r\n  minWidth?: number;\r\n  format?: (value: number) => string;\r\n}\r\n\r\nexport interface UserTableData extends User {\r\n  details?: JSX.Element;\r\n}\r\n\r\nexport interface Credentials {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nexport enum LoginPanelType {\r\n  Initial,\r\n  Login,\r\n  ForgotPassword,\r\n  CreatePassword,\r\n}\r\n\r\nexport enum AdminPanelType {\r\n  ClinicsTable,\r\n  ClinicForm,\r\n  Settings,\r\n}\r\n\r\nexport enum PhysicianPanelType {\r\n  PatientsTable,\r\n  PatientForm,\r\n  ReceptionistsTable,\r\n  ReportsTable,\r\n}\r\n\r\nexport enum ReceptionistPanelType {\r\n  PatientsTable,\r\n  PatientForm,\r\n  ReportsTable,\r\n}\r\n\r\nexport enum ManagerPanelType {\r\n  UsersTable,\r\n  UserForm,\r\n  PatientsTable,\r\n  PatientForm,\r\n}\r\n\r\nexport type AllPanelTypes =\r\n  | AdminPanelType\r\n  | PhysicianPanelType\r\n  | ManagerPanelType\r\n  | ReceptionistPanelType;\r\n\r\nexport interface PatientCommonPanelProps {\r\n  setCurrentPanel: (panel: PatientPanel) => void;\r\n}\r\n\r\nexport interface QuestionaireListProps extends PatientCommonPanelProps {\r\n  patientInfo: LoggedPatient;\r\n}\r\n\r\nexport interface PatientFormProps extends PatientCommonPanelProps {\r\n  patientAuth: UserAuth;\r\n}\r\n\r\nexport enum PatientPanel {\r\n  INITIAL,\r\n  EPC,\r\n  DN4,\r\n  OSWESTRY,\r\n}\r\n\r\nexport const RolesEnum = {\r\n  ADMIN: 'admin',\r\n  MANAGER: 'manager',\r\n  PHYSICIAN: 'physician',\r\n  RECEPTIONIST: 'receptionist',\r\n  PATIENT: 'patient',\r\n} as const;\r\n\r\nexport interface ClinicPayload {\r\n  name: string;\r\n  tax_id: string;\r\n  address_zipcode: string;\r\n  address_street: string;\r\n  address_city: string;\r\n  address_state: string;\r\n  phone: string;\r\n  user: {\r\n    name: string;\r\n    email: string;\r\n    password: string;\r\n  };\r\n}\r\n\r\nexport interface UserPayload {\r\n  name: string;\r\n  tax_id: string;\r\n  email?: string;\r\n  password: string;\r\n  address_zipcode: string;\r\n  address_street: string;\r\n  address_city: string;\r\n  address_state: string;\r\n  crm: string;\r\n  phone: string;\r\n  role: string;\r\n}\r\n\r\nexport interface PatientPayload {\r\n  name: string;\r\n  tax_id: string;\r\n  email?: string;\r\n  phone: string;\r\n  birthdate: string;\r\n  gender: string;\r\n  physician_id: number;\r\n}\r\n\r\nexport const QUESTIONAIRE_LIST = [\r\n  { value: 'BPI', label: 'Breve Inventário de Dor (BPI)' },\r\n  { value: 'HAD', label: 'HAD' },\r\n  { value: 'SF36', label: 'Qualidade de vida - SF36' },\r\n  { value: 'DN4', label: 'Dor Neuropática (DN4)' },\r\n  { value: 'EPC', label: 'Escala de pensamento catastrófico' },\r\n  { value: 'FIBROMIALGIA', label: 'Fibromialgia' },\r\n  { value: 'OSWESTRY', label: 'Questionário de Oswestry' },\r\n];\r\n","export default __webpack_public_path__ + \"static/media/mini-logo-white.d2319d1d.svg\";","export default __webpack_public_path__ + \"static/media/logo.1480c7f8.svg\";","import { withStyles, Theme } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport { deepOrange } from '@material-ui/core/colors';\r\n\r\nexport const OutlinedButton = withStyles((theme: Theme) => ({\r\n  root: {\r\n    color: 'black',\r\n    backgroundColor: 'white',\r\n    '&:hover': {\r\n      backgroundColor: 'white',\r\n    },\r\n    border: '1px solid rgba(0, 0, 0, 1)',\r\n    // textTransform: 'capitalize',\r\n    maxWidth: 185,\r\n    margin: theme.spacing(1),\r\n  },\r\n}))(Button);\r\n\r\nexport const OrangeButton = withStyles((theme: Theme) => ({\r\n  root: {\r\n    color: theme.palette.getContrastText(deepOrange[500]),\r\n    backgroundColor: deepOrange[500],\r\n    '&:hover': {\r\n      backgroundColor: deepOrange[700],\r\n    },\r\n    // marginLeft: 'auto',\r\n    margin: theme.spacing(1),\r\n  },\r\n}))(Button);\r\n","import { createContext } from 'react';\r\nimport { RolesEnum } from '../interfaces';\r\nimport { UserAuth } from '../models/UserAuth';\r\n\r\nexport function isValidRole(value?: string): value is keyof typeof RolesEnum {\r\n  return value ? value in RolesEnum : false;\r\n}\r\n\r\nexport const baseUrl = 'https://api-ador.iponce.com.br';\r\n\r\nexport const AuthContext = createContext<\r\n  [token: UserAuth, saveToken: (userToken?: UserAuth) => void]\r\n>([{ token: '' }, () => {}]);\r\n\r\nexport function getAuth() {\r\n  return JSON.parse(localStorage.getItem('auth') || '{}');\r\n}\r\n","import React, { useContext, useState } from 'react';\r\nimport {\r\n  withStyles,\r\n  makeStyles,\r\n  createStyles,\r\n  Theme,\r\n} from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport Link from '@material-ui/core/Link';\r\nimport clsx from 'clsx';\r\nimport { green } from '@material-ui/core/colors';\r\nimport { useHistory, useLocation, useParams } from 'react-router-dom';\r\n\r\nimport { Credentials, LoginPanelType, PanelCommonProps } from '../interfaces';\r\nimport minilogo from '../image/mini-logo-white.svg';\r\nimport logo from '../image/logo.svg';\r\nimport { OutlinedButton } from './Buttons';\r\nimport { AuthContext, baseUrl } from '../utils/loggedUser';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    loginPatient: {\r\n      backgroundColor: '#CEEBEA',\r\n      height: '100vh',\r\n    },\r\n    paperLoginPatient: {\r\n      margin: 'auto',\r\n      width: '90vw',\r\n    },\r\n    gridLoginPatient: {\r\n      padding: '1rem',\r\n    },\r\n    left: {\r\n      backgroundColor: 'black',\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      display: 'flex',\r\n    },\r\n    right: {\r\n      justifyContent: 'center',\r\n      alignItems: 'center',\r\n      display: 'flex',\r\n    },\r\n    paper: {\r\n      height: '100vh',\r\n      boxShadow: 'none',\r\n    },\r\n    contentBox: {\r\n      maxWidth: '400px',\r\n    },\r\n    centralize: {\r\n      textAlign: 'center',\r\n      marginBottom: theme.spacing(6),\r\n      marginTop: theme.spacing(6),\r\n    },\r\n    input: {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n    termsAndPolicy: {\r\n      fontSize: '0.875rem',\r\n    },\r\n    link: {\r\n      textDecoration: 'underline',\r\n    },\r\n    alignRight: {\r\n      textAlign: 'end',\r\n    },\r\n    forgotLink: {\r\n      marginTop: 10,\r\n      fontSize: '0.75rem',\r\n    },\r\n  })\r\n);\r\n\r\nasync function loginUser(credentials: Credentials) {\r\n  return fetch(`${baseUrl}/api/v1/login`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(credentials),\r\n  }).then((data) => data.json());\r\n}\r\n\r\nasync function loginPatient(tax_id: string, clinicId: number) {\r\n  return fetch(`${baseUrl}/api/v1/patient/login/${clinicId}`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({ tax_id }),\r\n  }).then((data) => data.json());\r\n}\r\n\r\nconst DefaultButton = withStyles((theme: Theme) => ({\r\n  root: {\r\n    color: 'white',\r\n    backgroundColor: 'black',\r\n    '&:hover': {\r\n      backgroundColor: 'black',\r\n    },\r\n    textTransform: 'capitalize',\r\n    maxWidth: 185,\r\n  },\r\n}))(Button);\r\n\r\nconst LoginPatientButton = withStyles((theme: Theme) => ({\r\n  root: {\r\n    color: 'white',\r\n    backgroundColor: green[400],\r\n  },\r\n  '&:hover': {\r\n    backgroundColor: green[700],\r\n  },\r\n}))(Button);\r\n\r\nfunction InitialPanel(props: PanelCommonProps) {\r\n  const classes = useStyles();\r\n  const preventDefault = (event: React.SyntheticEvent) =>\r\n    event.preventDefault();\r\n\r\n  return (\r\n    <Paper className={clsx(classes.paper, classes.right)}>\r\n      <Grid container spacing={0} className={classes.contentBox}>\r\n        <Grid item xs={12} className={classes.centralize}>\r\n          <img src={logo} className=\"app-logo\" alt=\"logo\" />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            Seja Bem-vindo!\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Typography variant=\"subtitle1\" gutterBottom>\r\n            Por favor informe suas credenciais para acessar a plataforma!\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item xs={12} className={classes.centralize}>\r\n          <DefaultButton\r\n            variant=\"contained\"\r\n            onClick={props.nextPanel}\r\n            size=\"large\"\r\n          >\r\n            Entrar\r\n          </DefaultButton>\r\n        </Grid>\r\n        <Grid item xs={12} className={classes.centralize}>\r\n          <Typography className={classes.termsAndPolicy}>\r\n            <Link\r\n              href=\"#\"\r\n              color=\"textPrimary\"\r\n              onClick={preventDefault}\r\n              className={classes.link}\r\n            >\r\n              Termos de uso\r\n            </Link>\r\n            &nbsp;e&nbsp;\r\n            <Link\r\n              href=\"#\"\r\n              color=\"textPrimary\"\r\n              onClick={preventDefault}\r\n              className={classes.link}\r\n            >\r\n              Políticas de privacidade\r\n            </Link>\r\n          </Typography>\r\n        </Grid>\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n}\r\n\r\nfunction LoginPanel(props: PanelCommonProps) {\r\n  const [, setAuth] = useContext(AuthContext);\r\n  const [email, setEmail] = useState<string>('');\r\n  const [password, setPassword] = useState<string>('');\r\n  const classes = useStyles();\r\n\r\n  const history = useHistory();\r\n  const location = useLocation<{ from: { pathname: string } }>();\r\n\r\n  const handleLoginSubmit = async (e: React.SyntheticEvent) => {\r\n    const { from } = location.state || { from: { pathname: '/' } };\r\n    e.preventDefault();\r\n    const token = await loginUser({\r\n      email,\r\n      password,\r\n    });\r\n    setAuth(token);\r\n    history.replace(from);\r\n  };\r\n\r\n  return (\r\n    <Paper className={clsx(classes.paper, classes.right)}>\r\n      <form onSubmit={handleLoginSubmit}>\r\n        <Grid container spacing={0} className={classes.contentBox}>\r\n          <Grid item xs={12} className={classes.centralize}>\r\n            <img src={logo} className=\"app-logo\" alt=\"logo\" />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Seja Bem-vindo!\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"subtitle1\" gutterBottom>\r\n              Por favor informe suas credenciais para acessar a plataforma!\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className={classes.input}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"email-input\"\r\n              label=\"E-mail\"\r\n              onChange={(e) => setEmail(e.target.value)}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className={classes.input}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"password-input\"\r\n              label=\"Senha\"\r\n              type=\"password\"\r\n              onChange={(e) => setPassword(e.target.value)}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} className={classes.alignRight}>\r\n            <Typography className={classes.forgotLink}>\r\n              <Link href=\"#\" color=\"textPrimary\" onClick={props.nextPanel}>\r\n                Esqueceu a senha?\r\n              </Link>\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className={classes.centralize}>\r\n            <DefaultButton variant=\"contained\" type=\"submit\" size=\"large\">\r\n              Entrar\r\n            </DefaultButton>\r\n          </Grid>\r\n        </Grid>\r\n      </form>\r\n    </Paper>\r\n  );\r\n}\r\n\r\nfunction ForgotPasswordPanel(props: PanelCommonProps) {\r\n  const [emailForgotPsw, setEmailForgotPsw] = useState<string>('');\r\n\r\n  const handleForgotPswSubmit = async (e: React.SyntheticEvent) => {\r\n    e.preventDefault();\r\n    // TODO call forgotPassword function here\r\n  };\r\n\r\n  const classes = useStyles();\r\n  return (\r\n    <Paper className={clsx(classes.paper, classes.right)}>\r\n      <form onSubmit={handleForgotPswSubmit}>\r\n        <Grid container spacing={0} className={classes.contentBox}>\r\n          <Grid item xs={12} className={classes.centralize}>\r\n            <img src={logo} className=\"app-logo\" alt=\"logo\" />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Esqueceu sua senha?\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"subtitle1\" gutterBottom>\r\n              Enviaremos um código de recuperação para o seu email\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={12} className={classes.input}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"email-forgot-psw-input\"\r\n              label=\"E-mail\"\r\n              onChange={(e) => setEmailForgotPsw(e.target.value)}\r\n            />\r\n          </Grid>\r\n          <Grid container className={classes.centralize}>\r\n            <Grid item xs={6}>\r\n              <OutlinedButton\r\n                variant=\"outlined\"\r\n                size=\"large\"\r\n                onClick={props.nextPanel}\r\n              >\r\n                Cancelar\r\n              </OutlinedButton>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <DefaultButton variant=\"contained\" type=\"submit\" size=\"large\">\r\n                Enviar\r\n              </DefaultButton>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </form>\r\n    </Paper>\r\n  );\r\n}\r\n\r\ninterface RouterParams {\r\n  clinic_id?: string;\r\n}\r\n\r\nfunction PatientPanel() {\r\n  const [taxId, setTaxId] = useState('');\r\n  const [, setAuth] = useContext(AuthContext);\r\n  const classes = useStyles();\r\n\r\n  const history = useHistory();\r\n  const location = useLocation<{ from: { pathname: string } }>();\r\n  const { clinic_id } = useParams<RouterParams>();\r\n  const handleLoginSubmit = async (e: React.SyntheticEvent) => {\r\n    const { from } = location.state || { from: { pathname: '/' } };\r\n    e.preventDefault();\r\n    const token = await loginPatient(taxId, Number(clinic_id));\r\n    setAuth(token);\r\n    history.replace(from);\r\n  };\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      justifyContent=\"center\"\r\n      spacing={0}\r\n      className={classes.loginPatient}\r\n    >\r\n      <Paper className={classes.paperLoginPatient}>\r\n        <Grid item xs={12} spacing={0} className={classes.gridLoginPatient}>\r\n          <Typography component=\"h1\" variant=\"h6\">\r\n            Acesse para continuar\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item xs={12} spacing={0} className={classes.gridLoginPatient}>\r\n          <Typography variant=\"body1\" align=\"left\">\r\n            Para ter acesso aos questionários, por favor insira seu CPF abaixo:\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item xs={12} spacing={0} className={classes.gridLoginPatient}>\r\n          <TextField\r\n            fullWidth\r\n            id=\"tax-id-input\"\r\n            label=\"CPF\"\r\n            onChange={(e) => setTaxId(e.target.value)}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} spacing={0} className={classes.gridLoginPatient}>\r\n          <LoginPatientButton variant=\"contained\" onClick={handleLoginSubmit}>\r\n            Entrar\r\n          </LoginPatientButton>\r\n        </Grid>\r\n      </Paper>\r\n    </Grid>\r\n  );\r\n}\r\n\r\ninterface LoginProps {\r\n  isPatient?: boolean;\r\n}\r\n\r\nexport default function Login(props: LoginProps) {\r\n  const [panel, setPanel] = useState<LoginPanelType>(LoginPanelType.Initial);\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Grid container className={classes.root} spacing={1}>\r\n      <Grid item xs={12}>\r\n        {props.isPatient ? (\r\n          <PatientPanel />\r\n        ) : (\r\n          <Grid container justifyContent=\"center\" spacing={0}>\r\n            <Slide\r\n              in={panel !== LoginPanelType.Initial}\r\n              direction=\"right\"\r\n              mountOnEnter\r\n              unmountOnExit\r\n            >\r\n              <Grid item xs={6}>\r\n                <Paper className={clsx(classes.paper, classes.left)}>\r\n                  <img src={minilogo} alt=\"logo\" width=\"300\" />\r\n                </Paper>\r\n              </Grid>\r\n            </Slide>\r\n            <Grid item xs={6}>\r\n              {panel === LoginPanelType.Initial && (\r\n                <InitialPanel\r\n                  nextPanel={() => setPanel(LoginPanelType.Login)}\r\n                />\r\n              )}\r\n              {panel === LoginPanelType.Login && (\r\n                <LoginPanel\r\n                  nextPanel={() => setPanel(LoginPanelType.ForgotPassword)}\r\n                />\r\n              )}\r\n              {panel === LoginPanelType.ForgotPassword && (\r\n                <ForgotPasswordPanel\r\n                  nextPanel={() => setPanel(LoginPanelType.Login)}\r\n                />\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n        )}\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/mini-logo.b070b62c.svg\";","import { useContext, useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport { useHistory } from 'react-router';\r\nimport {\r\n  alpha,\r\n  createStyles,\r\n  makeStyles,\r\n  useTheme,\r\n  Theme,\r\n} from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Button from '@material-ui/core/Button';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport PieChartIcon from '@material-ui/icons/PieChart';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport LocalHospitalIcon from '@material-ui/icons/LocalHospital';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport AirlineSeatFlatIcon from '@material-ui/icons/AirlineSeatFlat';\r\nimport logo from '../image/logo.svg';\r\nimport minilogo from '../image/mini-logo.svg';\r\nimport {\r\n  AdminPanelType,\r\n  AllPanelTypes,\r\n  ManagerPanelType,\r\n  RolesEnum,\r\n} from '../interfaces';\r\nimport { AuthContext } from '../utils/loggedUser';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      display: 'flex',\r\n    },\r\n    appBar: {\r\n      zIndex: theme.zIndex.drawer + 1,\r\n      transition: theme.transitions.create(['width', 'margin'], {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen,\r\n      }),\r\n    },\r\n    appBarShift: {\r\n      marginLeft: drawerWidth,\r\n      width: `calc(100% - ${drawerWidth}px)`,\r\n      transition: theme.transitions.create(['width', 'margin'], {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.enteringScreen,\r\n      }),\r\n    },\r\n    menuButton: {},\r\n    hide: {\r\n      display: 'none',\r\n    },\r\n    drawer: {\r\n      width: drawerWidth,\r\n      flexShrink: 0,\r\n      whiteSpace: 'nowrap',\r\n    },\r\n    drawerOpen: {\r\n      width: drawerWidth,\r\n      transition: theme.transitions.create('width', {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.enteringScreen,\r\n      }),\r\n    },\r\n    drawerClose: {\r\n      transition: theme.transitions.create('width', {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.leavingScreen,\r\n      }),\r\n      overflowX: 'hidden',\r\n      width: theme.spacing(7),\r\n      [theme.breakpoints.up('sm')]: {\r\n        width: theme.spacing(8),\r\n      },\r\n    },\r\n    collapsedToolbar: {\r\n      paddingLeft: 12,\r\n    },\r\n    toolbar: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'flex-end',\r\n      padding: theme.spacing(0, 1),\r\n      // necessary for content to be below app bar\r\n      ...theme.mixins.toolbar,\r\n    },\r\n    content: {\r\n      flexGrow: 1,\r\n      padding: theme.spacing(3),\r\n    },\r\n    bottomButton: {\r\n      marginTop: 'auto',\r\n    },\r\n    search: {\r\n      position: 'relative',\r\n      borderRadius: theme.shape.borderRadius,\r\n      backgroundColor: alpha(theme.palette.common.white, 0.15),\r\n      '&:hover': {\r\n        backgroundColor: alpha(theme.palette.common.white, 0.25),\r\n      },\r\n      marginRight: theme.spacing(2),\r\n      marginLeft: 0,\r\n      width: '100%',\r\n      [theme.breakpoints.up('sm')]: {\r\n        marginLeft: theme.spacing(3),\r\n        width: 'auto',\r\n      },\r\n    },\r\n    searchIcon: {\r\n      padding: theme.spacing(0, 2),\r\n      height: '100%',\r\n      position: 'absolute',\r\n      pointerEvents: 'none',\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n    },\r\n    inputRoot: {\r\n      color: 'inherit',\r\n    },\r\n    inputInput: {\r\n      padding: theme.spacing(1, 1, 1, 0),\r\n      // vertical padding + font size from searchIcon\r\n      paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n      transition: theme.transitions.create('width'),\r\n      width: '100%',\r\n      [theme.breakpoints.up('md')]: {\r\n        width: '20ch',\r\n      },\r\n    },\r\n  })\r\n);\r\n\r\ninterface LeftNavProps {\r\n  role: string;\r\n  currentPanel: AllPanelTypes;\r\n  openClinicsTablePage?: () => void;\r\n  openTermsOfUsePage?: () => void;\r\n  setPanel: (panelType: AllPanelTypes) => void;\r\n}\r\n\r\nexport default function LeftNav(props: LeftNavProps) {\r\n  const [, setAuth] = useContext(AuthContext);\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [open, setOpen] = useState(false);\r\n  const history = useHistory();\r\n  const { role, currentPanel, setPanel } = props;\r\n\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const signout = () => {\r\n    setAuth();\r\n    history.push('/login');\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar\r\n        position=\"fixed\"\r\n        className={clsx(classes.appBar, {\r\n          [classes.appBarShift]: open,\r\n        })}\r\n        color=\"default\"\r\n      >\r\n        <Toolbar className={classes.collapsedToolbar}>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            onClick={handleDrawerOpen}\r\n            edge=\"start\"\r\n            className={clsx(classes.menuButton, {\r\n              [classes.hide]: open,\r\n            })}\r\n          >\r\n            <img src={minilogo} alt=\"logo\" width=\"39\" />\r\n          </IconButton>\r\n          <div className={classes.search}>\r\n            <div className={classes.searchIcon}>\r\n              <SearchIcon />\r\n            </div>\r\n            <InputBase\r\n              placeholder=\"Pesquisar paciente\"\r\n              classes={{\r\n                root: classes.inputRoot,\r\n                input: classes.inputInput,\r\n              }}\r\n              inputProps={{ 'aria-label': 'search' }}\r\n            />\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer\r\n        variant=\"permanent\"\r\n        className={clsx(classes.drawer, {\r\n          [classes.drawerOpen]: open,\r\n          [classes.drawerClose]: !open,\r\n        })}\r\n        classes={{\r\n          paper: clsx({\r\n            [classes.drawerOpen]: open,\r\n            [classes.drawerClose]: !open,\r\n          }),\r\n        }}\r\n      >\r\n        <div className={classes.toolbar}>\r\n          <img src={logo} className=\"app-logo\" alt=\"logo\" />\r\n          <IconButton onClick={handleDrawerClose}>\r\n            {theme.direction === 'rtl' ? (\r\n              <ChevronRightIcon />\r\n            ) : (\r\n              <ChevronLeftIcon />\r\n            )}\r\n          </IconButton>\r\n        </div>\r\n        <Divider />\r\n        {role === RolesEnum.ADMIN && (\r\n          <List>\r\n            <ListItem\r\n              button\r\n              key=\"LocalHospitalIcon\"\r\n              selected={[\r\n                AdminPanelType.ClinicsTable,\r\n                AdminPanelType.ClinicForm,\r\n              ].includes(currentPanel as AdminPanelType)}\r\n              onClick={props.openClinicsTablePage}\r\n            >\r\n              <ListItemIcon>\r\n                <LocalHospitalIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Clínicas\" />\r\n            </ListItem>\r\n            <ListItem\r\n              button\r\n              key=\"SettingsIcon\"\r\n              selected={\r\n                AdminPanelType.Settings === (currentPanel as AdminPanelType)\r\n              }\r\n              onClick={props.openTermsOfUsePage}\r\n            >\r\n              <ListItemIcon>\r\n                <SettingsIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Configurações\" />\r\n            </ListItem>\r\n          </List>\r\n        )}\r\n        {role === RolesEnum.MANAGER && (\r\n          <List>\r\n            <ListItem\r\n              button\r\n              key=\"PersonIcon\"\r\n              selected={\r\n                ManagerPanelType.UsersTable ===\r\n                (currentPanel as ManagerPanelType)\r\n              }\r\n            >\r\n              <ListItemIcon>\r\n                <PersonIcon\r\n                  onClick={() => setPanel(ManagerPanelType.UsersTable)}\r\n                />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Usuários\" />\r\n            </ListItem>\r\n            <ListItem\r\n              button\r\n              key=\"AirlineSeatFlatIcon\"\r\n              selected={\r\n                ManagerPanelType.PatientsTable ===\r\n                (currentPanel as ManagerPanelType)\r\n              }\r\n            >\r\n              <ListItemIcon>\r\n                <AirlineSeatFlatIcon\r\n                  onClick={() => setPanel(ManagerPanelType.PatientsTable)}\r\n                />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Pacientes\" />\r\n            </ListItem>\r\n          </List>\r\n        )}\r\n        {role === RolesEnum.PHYSICIAN && (\r\n          <List>\r\n            <ListItem button key=\"PersonIcon\" selected>\r\n              <ListItemIcon>\r\n                <PersonIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Pacientes\" />\r\n            </ListItem>\r\n            <ListItem button key=\"FavoriteIcon\">\r\n              <ListItemIcon>\r\n                <FavoriteIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Acolhimento\" />\r\n            </ListItem>\r\n            <ListItem button key=\"PieChartIcon\">\r\n              <ListItemIcon>\r\n                <PieChartIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Relatórios\" />\r\n            </ListItem>\r\n          </List>\r\n        )}\r\n        {role === RolesEnum.RECEPTIONIST && (\r\n          <List>\r\n            <ListItem button key=\"PersonIcon\" selected>\r\n              <ListItemIcon>\r\n                <PersonIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Pacientes\" />\r\n            </ListItem>\r\n            <ListItem button key=\"PieChartIcon\">\r\n              <ListItemIcon>\r\n                <PieChartIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary=\"Relatórios\" />\r\n            </ListItem>\r\n          </List>\r\n        )}\r\n        <Button className={classes.bottomButton} onClick={signout}>\r\n          SAIR\r\n        </Button>\r\n      </Drawer>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport { TableProps } from '../interfaces';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      width: '100%',\r\n    },\r\n    container: {\r\n      maxHeight: 440,\r\n    },\r\n    tableHeadCell: {\r\n      backgroundColor: theme.palette.common.black,\r\n      color: theme.palette.common.white,\r\n    },\r\n    tableHeadCheckbox: {\r\n      color: theme.palette.common.white,\r\n    },\r\n  })\r\n);\r\n\r\nexport default function PatientsTable(props: TableProps) {\r\n  const classes = useStyles();\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n  const [selected, setSelected] = React.useState<number[]>([]);\r\n\r\n  const { columns, rows } = props;\r\n\r\n  const handleChangePage = (event: unknown, newPage: number) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (\r\n    event: React.ChangeEvent<HTMLInputElement>\r\n  ) => {\r\n    setRowsPerPage(+event.target.value);\r\n    setPage(0);\r\n  };\r\n\r\n  const handleSelectAllClick = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = rows.map((n) => n.id);\r\n      setSelected(newSelecteds);\r\n      return;\r\n    }\r\n    setSelected([]);\r\n  };\r\n\r\n  const handleClick = (event: React.MouseEvent<unknown>, cpf: number) => {\r\n    const selectedIndex = selected.indexOf(cpf);\r\n    let newSelected: number[] = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, cpf);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1)\r\n      );\r\n    }\r\n\r\n    setSelected(newSelected);\r\n  };\r\n\r\n  const isSelected = (id: number) => selected.indexOf(id) !== -1;\r\n\r\n  return (\r\n    <Paper className={classes.root}>\r\n      <TableContainer className={classes.container}>\r\n        <Table stickyHeader aria-label=\"sticky table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell padding=\"checkbox\" className={classes.tableHeadCell}>\r\n                <Checkbox\r\n                  indeterminate={\r\n                    selected.length > 0 && selected.length < rows.length\r\n                  }\r\n                  checked={rows.length > 0 && selected.length === rows.length}\r\n                  onChange={handleSelectAllClick}\r\n                  inputProps={{ 'aria-label': 'select all desserts' }}\r\n                  color=\"default\"\r\n                  classes={{ root: classes.tableHeadCheckbox }}\r\n                />\r\n              </TableCell>\r\n              {columns.map((column) => (\r\n                <TableCell\r\n                  key={column.id}\r\n                  align=\"left\"\r\n                  style={{ minWidth: column.minWidth }}\r\n                  className={classes.tableHeadCell}\r\n                >\r\n                  {column.label}\r\n                </TableCell>\r\n              ))}\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {rows\r\n              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n              .map((row, index) => {\r\n                const isItemSelected = isSelected(row.id);\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    role=\"checkbox\"\r\n                    tabIndex={-1}\r\n                    key={row.id}\r\n                    aria-checked={isItemSelected}\r\n                    selected={isItemSelected}\r\n                    onClick={(event) => handleClick(event, row.id)}\r\n                  >\r\n                    <TableCell padding=\"checkbox\">\r\n                      <Checkbox\r\n                        checked={isItemSelected}\r\n                        inputProps={{ 'aria-labelledby': labelId }}\r\n                      />\r\n                    </TableCell>\r\n                    {columns.map((column) => {\r\n                      const value = row[column.id];\r\n                      return (\r\n                        <TableCell key={column.id} align=\"left\">\r\n                          {column.format && typeof value === 'number'\r\n                            ? column.format(value)\r\n                            : value}\r\n                        </TableCell>\r\n                      );\r\n                    })}\r\n                  </TableRow>\r\n                );\r\n              })}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      <TablePagination\r\n        rowsPerPageOptions={[10, 25, 100]}\r\n        component=\"div\"\r\n        count={rows.length}\r\n        rowsPerPage={rowsPerPage}\r\n        page={page}\r\n        onPageChange={handleChangePage}\r\n        onRowsPerPageChange={handleChangeRowsPerPage}\r\n      />\r\n    </Paper>\r\n  );\r\n}\r\n","import { useEffect, useState } from 'react';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport { PatientTableColumn, PatientTableData } from '../../interfaces';\r\nimport { Patient } from '../../models/Patient';\r\nimport GenericTable from '../GenericTable';\r\nimport { OrangeButton } from '../Buttons';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst columns: PatientTableColumn[] = [\r\n  { id: 'name', label: 'Nome', minWidth: 170 },\r\n  { id: 'email', label: 'E-mail', minWidth: 100 },\r\n  {\r\n    id: 'tax_id',\r\n    label: 'CPF',\r\n    minWidth: 100,\r\n    format: (value: number) =>\r\n      value\r\n        .toString()\r\n        .padStart(11, '0')\r\n        .replace(\r\n          /(\\d{3})(\\d{3})(\\d{3})(\\d{2})/,\r\n          (regex, arg1, arg2, arg3, arg4) =>\r\n            arg1 + '.' + arg2 + '.' + arg3 + '-' + arg4\r\n        ),\r\n  },\r\n  { id: 'phone', label: 'Telefone', minWidth: 100 },\r\n  { id: 'birthdate', label: 'Nascimento', minWidth: 100 },\r\n  { id: 'gender', label: 'Sexo', minWidth: 100 },\r\n  { id: 'details', label: 'Detalhes', minWidth: 50 },\r\n];\r\n\r\nfunction setPatientsIntoTable(\r\n  patients: Patient[],\r\n  deletePatient: (patient: Patient) => Promise<void>,\r\n  openPatientForm: (patient?: Patient) => void\r\n) {\r\n  return patients.map((patient: PatientTableData) => {\r\n    const handlePatientDetails = async (e: React.SyntheticEvent) => {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n      openPatientForm(patient);\r\n    };\r\n    const handleDeletePatient = async (e: React.SyntheticEvent) => {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n      deletePatient(patient);\r\n    };\r\n\r\n    patient.details = (\r\n      <>\r\n        <IconButton onClick={handlePatientDetails}>\r\n          <VisibilityIcon />\r\n        </IconButton>\r\n        <IconButton onClick={handleDeletePatient}>\r\n          <DeleteIcon />\r\n        </IconButton>\r\n      </>\r\n    );\r\n    return patient;\r\n  });\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      marginTop: '64px',\r\n      width: '100%',\r\n    },\r\n  })\r\n);\r\ninterface PatientsTableProps {\r\n  patients: Patient[];\r\n  deletePatient: (patient: Patient) => Promise<void>;\r\n  openPatientForm: (patient?: Patient) => void;\r\n}\r\n\r\nexport default function PatientsTable(props: PatientsTableProps) {\r\n  const classes = useStyles();\r\n  const [rows, setRows] = useState<PatientTableData[]>([]);\r\n\r\n  const { deletePatient, openPatientForm, patients } = props;\r\n\r\n  useEffect(() => {\r\n    setRows(setPatientsIntoTable(patients, deletePatient, openPatientForm));\r\n  }, [patients, deletePatient, openPatientForm]);\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      className={classes.root}\r\n      spacing={1}\r\n      alignItems=\"flex-end\"\r\n      justifyContent=\"flex-end\"\r\n    >\r\n      <OrangeButton\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        onClick={() => props.openPatientForm()}\r\n      >\r\n        Cadastrar novo Paciente\r\n      </OrangeButton>\r\n      <GenericTable columns={columns} rows={rows} />\r\n    </Grid>\r\n  );\r\n}\r\n","import { Dispatch } from 'react';\r\nimport { PatientPayload } from '../interfaces';\r\nimport { Patient } from '../models/Patient';\r\nimport { baseUrl, getAuth } from '../utils/loggedUser';\r\n\r\nexport enum IActions {\r\n  PATIENTS_FETCHED,\r\n  // PATIENT_FETCHED,\r\n  PATIENT_CREATED,\r\n  PATIENT_DELETED,\r\n  PATIENT_UPDATED,\r\n}\r\n\r\nexport interface IPatientsDispatchProps {\r\n  type: IActions;\r\n  patients: Patient[];\r\n}\r\n\r\nexport function getPatients() {\r\n  return async (dispatch: Dispatch<IPatientsDispatchProps>) => {\r\n    const response = await fetch(`${baseUrl}/api/v1/patients`, {\r\n      method: 'GET',\r\n      headers: {\r\n        Authorization: `Bearer ${getAuth().token}`,\r\n      },\r\n    }).then((data) => data.json());\r\n\r\n    dispatch({ type: IActions.PATIENTS_FETCHED, patients: response.patients });\r\n  };\r\n}\r\n\r\nexport function deletePatient(patient: Patient) {\r\n  return async (dispatch: Dispatch<IPatientsDispatchProps>) => {\r\n    const response = await fetch(`${baseUrl}/api/v1/patients/${patient.id}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        Authorization: `Bearer ${getAuth().token}`,\r\n      },\r\n    });\r\n    if (response.ok) {\r\n      dispatch({ type: IActions.PATIENT_DELETED, patients: [patient] });\r\n    }\r\n  };\r\n}\r\n\r\nexport function createPatient(patient: PatientPayload) {\r\n  return async (dispatch: Dispatch<IPatientsDispatchProps>) => {\r\n    const response = await fetch(`${baseUrl}/api/v1/patients`, {\r\n      method: 'POST',\r\n      headers: {\r\n        Authorization: `Bearer ${getAuth().token}`,\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(patient),\r\n    }).then((data) => data.json());\r\n    dispatch({ type: IActions.PATIENT_CREATED, patients: [response.patient] });\r\n    return response.patient;\r\n  };\r\n}\r\n\r\nexport function updatePatient(id: number, patient: PatientPayload) {\r\n  return async (dispatch: Dispatch<IPatientsDispatchProps>) => {\r\n    const response = await fetch(`${baseUrl}/api/v1/patients/${id}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        Authorization: `Bearer ${getAuth().token}`,\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(patient),\r\n    }).then((data) => data.json());\r\n\r\n    dispatch({ type: IActions.PATIENT_UPDATED, patients: [response.patient] });\r\n  };\r\n}\r\n","import { Dispatch } from 'react';\r\nimport { baseUrl, getAuth } from '../utils/loggedUser';\r\n\r\nexport enum IActions {\r\n  QUESTIONAIRES_FETCHED,\r\n  QUESTIONAIRES_SENT,\r\n}\r\n\r\nexport interface IQuestionairesDispatchProps {\r\n  type: IActions;\r\n  questionaires: string[];\r\n}\r\n\r\nexport function getQuestionaires(patient_id: number) {\r\n  return async (dispatch: Dispatch<IQuestionairesDispatchProps>) => {\r\n    const response = await fetch(\r\n      `${baseUrl}/api/v1/forms/patient/${patient_id}`,\r\n      {\r\n        method: 'GET',\r\n        headers: {\r\n          Authorization: `Bearer ${getAuth().token}`,\r\n        },\r\n      }\r\n    ).then((data) => data.json());\r\n\r\n    dispatch({\r\n      type: IActions.QUESTIONAIRES_FETCHED,\r\n      questionaires: response.forms.map(({ type }: { type: string }) => type),\r\n    });\r\n  };\r\n}\r\n\r\nexport function getQuestionairesForPatient() {\r\n  return async (dispatch: Dispatch<IQuestionairesDispatchProps>) => {\r\n    const response = await fetch(`${baseUrl}/api/v1/forms/patient`, {\r\n      method: 'GET',\r\n      headers: {\r\n        Authorization: `Bearer ${getAuth().token}`,\r\n      },\r\n    }).then((data) => data.json());\r\n\r\n    dispatch({\r\n      type: IActions.QUESTIONAIRES_FETCHED,\r\n      questionaires: response.forms.map(({ type }: { type: string }) => type),\r\n    });\r\n  };\r\n}\r\n\r\nexport function sendQuestionaires(patient_id: number, forms: string[]) {\r\n  return async (dispatch: Dispatch<IQuestionairesDispatchProps>) => {\r\n    const response = await fetch(`${baseUrl}/api/v1/forms/request`, {\r\n      method: 'POST',\r\n      headers: {\r\n        Authorization: `Bearer ${getAuth().token}`,\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ patient_id, forms }),\r\n    });\r\n    if (response.ok) {\r\n      dispatch({ type: IActions.QUESTIONAIRES_SENT, questionaires: forms });\r\n    }\r\n  };\r\n}\r\n\r\nexport function clearQuestionaires() {\r\n  return async (dispatch: Dispatch<IQuestionairesDispatchProps>) => {\r\n    dispatch({ type: IActions.QUESTIONAIRES_FETCHED, questionaires: [] });\r\n  };\r\n}\r\n","import { IActions, IPatientsDispatchProps } from '../actions/patient';\r\nimport { Patient } from '../models/Patient';\r\n\r\nexport default function patientReducer(\r\n  state: Patient[],\r\n  action: IPatientsDispatchProps\r\n) {\r\n  const { type } = action;\r\n  switch (type) {\r\n    case IActions.PATIENTS_FETCHED:\r\n      return action.patients;\r\n    case IActions.PATIENT_CREATED:\r\n      return [...state, ...action.patients];\r\n    case IActions.PATIENT_DELETED:\r\n      return state.filter(\r\n        (patient: Patient) => patient.id !== action.patients[0].id\r\n      );\r\n    case IActions.PATIENT_UPDATED:\r\n      return state.map((patient: Patient) => {\r\n        if (patient.id === action.patients[0].id) {\r\n          return action.patients[0];\r\n        }\r\n        return patient;\r\n      });\r\n  }\r\n}\r\n","import { IActions, IQuestionairesDispatchProps } from '../actions/questionaire';\r\n\r\nexport default function questionaireReducer(\r\n  state: string[],\r\n  action: IQuestionairesDispatchProps\r\n) {\r\n  const { type } = action;\r\n  switch (type) {\r\n    case IActions.QUESTIONAIRES_FETCHED:\r\n      return action.questionaires;\r\n    case IActions.QUESTIONAIRES_SENT:\r\n      return action.questionaires;\r\n  }\r\n}\r\n","import React, { useState } from 'react';\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { deepOrange } from '@material-ui/core/colors';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Select from '@material-ui/core/Select';\r\nimport { OrangeButton, OutlinedButton } from '../Buttons';\r\nimport { PatientPayload, QUESTIONAIRE_LIST } from '../../interfaces';\r\nimport { Patient } from '../../models/Patient';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      marginTop: '64px',\r\n      width: '100%',\r\n      padding: theme.spacing(4),\r\n    },\r\n    headerSection: {\r\n      color: deepOrange[500],\r\n    },\r\n    ownerHeaderSection: {\r\n      marginTop: theme.spacing(4),\r\n    },\r\n    footerSection: {\r\n      marginTop: theme.spacing(4),\r\n    },\r\n  })\r\n);\r\n\r\ninterface PatientFormProps {\r\n  currentPatient?: Patient;\r\n  questionaires: string[];\r\n  openPatientsTablePage: () => void;\r\n  setPatient: (\r\n    id: number | undefined,\r\n    patientPayload: PatientPayload,\r\n    questionairePayload: string[]\r\n  ) => Promise<void>;\r\n}\r\n\r\nexport default function PatientForm(props: PatientFormProps) {\r\n  const { currentPatient, setPatient } = props;\r\n  const [patientName, setPatientName] = useState<string>(\r\n    currentPatient?.name || ''\r\n  );\r\n  const [taxId, setTaxId] = useState<string>(currentPatient?.tax_id || '');\r\n  const [email, setEmail] = useState<string>(currentPatient?.email || '');\r\n\r\n  const [phone, setPhone] = useState<string>(currentPatient?.phone || '');\r\n  const [birthdate, setBirthdate] = useState<string>(\r\n    currentPatient?.birthdate || ''\r\n  );\r\n  const [gender, setGender] = useState<string>(currentPatient?.gender || 'F');\r\n  const [physicianId, setPhysicianId] = useState<number>(\r\n    currentPatient?.physician_id || 0\r\n  );\r\n\r\n  const [questionaires, setQuestionaires] = useState<string[]>(\r\n    props.questionaires\r\n  );\r\n  const classes = useStyles();\r\n\r\n  const handleSetPatient = async (e: React.SyntheticEvent) => {\r\n    e.preventDefault();\r\n    const patientPayload = {\r\n      name: patientName,\r\n      tax_id: taxId,\r\n      email,\r\n      phone,\r\n      birthdate,\r\n      gender,\r\n      physician_id: physicianId,\r\n    };\r\n    setPatient(currentPatient?.id, patientPayload, questionaires);\r\n  };\r\n\r\n  const handleCheckboxOnChange = (\r\n    event: React.ChangeEvent<HTMLInputElement>\r\n  ) => {\r\n    setQuestionaires(\r\n      event.target.checked\r\n        ? [...questionaires, event.target.name]\r\n        : questionaires.filter((q) => q !== event.target.name)\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Paper className={classes.root}>\r\n      <form onSubmit={handleSetPatient}>\r\n        <Grid\r\n          container\r\n          justifyContent=\"flex-start\"\r\n          alignItems=\"flex-start\"\r\n          alignContent=\"flex-start\"\r\n        >\r\n          <Typography\r\n            variant=\"h6\"\r\n            gutterBottom\r\n            className={classes.headerSection}\r\n          >\r\n            Dados do Paciente\r\n          </Typography>\r\n        </Grid>\r\n        <Grid container spacing={4}>\r\n          <Grid item xs={4}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"user-name-input\"\r\n              label=\"Nome do usuário\"\r\n              defaultValue={patientName}\r\n              onChange={(e) => setPatientName(e.target.value)}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"tax-id-input\"\r\n              label=\"CNPJ/CPF\"\r\n              defaultValue={taxId}\r\n              onChange={(e) => setTaxId(e.target.value)}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <TextField\r\n              fullWidth\r\n              type=\"date\"\r\n              id=\"birthdate-input\"\r\n              label=\"Data de aniversário\"\r\n              defaultValue={birthdate}\r\n              onChange={(e) => setBirthdate(e.target.value)}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"email-input\"\r\n              label=\"E-mail\"\r\n              defaultValue={email}\r\n              disabled={!!currentPatient?.email}\r\n              onChange={(e) => setEmail(e.target.value)}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <FormControl>\r\n              <InputLabel htmlFor=\"gender-select\">Sexo</InputLabel>\r\n              <Select\r\n                native\r\n                id=\"gender-select\"\r\n                value={gender}\r\n                onChange={(e) => setGender(e.target.value as string)}\r\n              >\r\n                <option key=\"female\" value=\"F\">\r\n                  F\r\n                </option>\r\n                <option key=\"male\" value=\"M\">\r\n                  M\r\n                </option>\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"physician-id-input\"\r\n              label=\"Médico\"\r\n              defaultValue={physicianId}\r\n              onChange={(e) => setPhysicianId(Number(e.target.value))}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"phone-input\"\r\n              label=\"Telefone\"\r\n              defaultValue={phone}\r\n              onChange={(e) => setPhone(e.target.value)}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        <Grid\r\n          container\r\n          justifyContent=\"flex-start\"\r\n          alignItems=\"flex-start\"\r\n          alignContent=\"flex-start\"\r\n          style={{ marginTop: 36 }}\r\n        >\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"subtitle1\" align=\"left\">\r\n              Quais questionários foram solicitados para esse paciente?\r\n            </Typography>\r\n          </Grid>\r\n          {QUESTIONAIRE_LIST.map((item) => (\r\n            <Grid item xs={12}>\r\n              <FormGroup row>\r\n                <FormControlLabel\r\n                  control={\r\n                    <Checkbox\r\n                      checked={questionaires.includes(item.value)}\r\n                      onChange={handleCheckboxOnChange}\r\n                      name={item.value}\r\n                    />\r\n                  }\r\n                  label={item.label}\r\n                />\r\n              </FormGroup>\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n        <Grid\r\n          container\r\n          justifyContent=\"center\"\r\n          alignItems=\"center\"\r\n          alignContent=\"center\"\r\n          className={classes.footerSection}\r\n        >\r\n          <OutlinedButton\r\n            variant=\"outlined\"\r\n            onClick={props.openPatientsTablePage}\r\n          >\r\n            Cancelar\r\n          </OutlinedButton>\r\n          <OrangeButton type=\"submit\">Salvar</OrangeButton>\r\n        </Grid>\r\n      </form>\r\n    </Paper>\r\n  );\r\n}\r\n","import { useEffect, useReducer, useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\n\r\nimport LeftNav from '../LeftNav';\r\nimport PatientsTable from '../common/PatientsTable';\r\nimport {\r\n  AllPanelTypes,\r\n  PatientPayload,\r\n  PhysicianPanelType,\r\n} from '../../interfaces';\r\nimport { Patient } from '../../models/Patient';\r\nimport patientReducer from '../../reducers/patient';\r\nimport questionaireReducer from '../../reducers/questionaire';\r\nimport {\r\n  createPatient,\r\n  deletePatient,\r\n  getPatients,\r\n  updatePatient,\r\n} from '../../actions/patient';\r\nimport PatientForm from '../common/PatientForm';\r\nimport {\r\n  clearQuestionaires,\r\n  getQuestionaires,\r\n  sendQuestionaires,\r\n} from '../../actions/questionaire';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    appRoot: {\r\n      display: 'flex',\r\n    },\r\n    toolbar: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'flex-end',\r\n      padding: theme.spacing(0, 1),\r\n      // necessary for content to be below app bar\r\n      ...theme.mixins.toolbar,\r\n    },\r\n    content: {\r\n      flexGrow: 1,\r\n      padding: theme.spacing(3),\r\n    },\r\n  })\r\n);\r\n\r\nfunction PhysicianPage() {\r\n  const classes = useStyles();\r\n  const [panel, setPanel] = useState<PhysicianPanelType>(\r\n    PhysicianPanelType.PatientsTable\r\n  );\r\n  const [currentPatient, setCurrentPatient] = useState<Patient>();\r\n\r\n  const [patients, dispatch] = useReducer(patientReducer, []);\r\n  const [questionaires, questionairesDispatch] = useReducer(\r\n    questionaireReducer,\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    getPatients()(dispatch);\r\n  }, []);\r\n\r\n  const setPatient = async (\r\n    id: number | undefined,\r\n    patientPayload: PatientPayload,\r\n    questionairePayload: string[]\r\n  ) => {\r\n    let newPatient;\r\n    if (id) {\r\n      delete patientPayload.email;\r\n      await updatePatient(id, patientPayload)(dispatch);\r\n    } else {\r\n      newPatient = await createPatient(patientPayload)(dispatch);\r\n    }\r\n    await sendQuestionaires(\r\n      id ?? newPatient.id,\r\n      questionairePayload\r\n    )(questionairesDispatch);\r\n    setPanel(PhysicianPanelType.PatientsTable);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={clsx({\r\n        [classes.appRoot]: true,\r\n      })}\r\n    >\r\n      <CssBaseline />\r\n      <LeftNav\r\n        role=\"physician\"\r\n        currentPanel={PhysicianPanelType.PatientsTable}\r\n        setPanel={(panel: AllPanelTypes) =>\r\n          setPanel(panel as PhysicianPanelType)\r\n        }\r\n      />\r\n      <main className={classes.content}>\r\n        {panel === PhysicianPanelType.PatientsTable && (\r\n          <PatientsTable\r\n            patients={patients}\r\n            deletePatient={(patient: Patient) =>\r\n              deletePatient(patient)(dispatch)\r\n            }\r\n            openPatientForm={async (patient?: Patient) => {\r\n              setCurrentPatient(patient);\r\n              patient\r\n                ? await getQuestionaires(patient.id)(questionairesDispatch)\r\n                : clearQuestionaires()(questionairesDispatch);\r\n              setPanel(PhysicianPanelType.PatientForm);\r\n            }}\r\n          />\r\n        )}\r\n        {panel === PhysicianPanelType.PatientForm && (\r\n          <PatientForm\r\n            currentPatient={currentPatient}\r\n            setPatient={setPatient}\r\n            questionaires={questionaires}\r\n            openPatientsTablePage={() =>\r\n              setPanel(PhysicianPanelType.PatientsTable)\r\n            }\r\n          />\r\n        )}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PhysicianPage;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { ClinicTableColumn, ClinicTableData } from '../../interfaces';\r\nimport { Clinic } from '../../models/Clinic';\r\nimport GenericTable from '../GenericTable';\r\nimport { OrangeButton } from '../Buttons';\r\n\r\n// TODO: Need to double check if these values below are valid in the back-end\r\nenum ClinicStatus {\r\n  ACTIVE = 'Ativo',\r\n  INACTIVE = 'Inativo',\r\n}\r\n\r\nconst columns: ClinicTableColumn[] = [\r\n  // { id: 'id', label: 'ID' },\r\n  { id: 'name', label: 'Nome', minWidth: 100 },\r\n  { id: 'address_zipcode', label: 'CEP', minWidth: 100 },\r\n  { id: 'address_street', label: 'Endereço', minWidth: 100 },\r\n  { id: 'address_city', label: 'Cidade', minWidth: 100 },\r\n  { id: 'address_state', label: 'Estado', minWidth: 100 },\r\n  { id: 'phone', label: 'Telefone', minWidth: 100 },\r\n  { id: 'status', label: 'Status', minWidth: 100 },\r\n  { id: 'details', label: 'Detalhes', minWidth: 100 },\r\n];\r\n\r\nfunction setClinicsIntoTable(\r\n  clinics: Clinic[],\r\n  deleteClinic: (clinic: Clinic) => Promise<void>,\r\n  openClinicForm: (clinic?: Clinic) => void\r\n) {\r\n  return clinics.map((clinic: ClinicTableData) => {\r\n    const handleClinicDetails = async (e: React.SyntheticEvent) => {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n      openClinicForm(clinic);\r\n    };\r\n    const handleDeleteClinic = async (e: React.SyntheticEvent) => {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n      deleteClinic(clinic);\r\n    };\r\n\r\n    clinic.status = (ClinicStatus as any)[clinic.status];\r\n    clinic.details = (\r\n      <>\r\n        <IconButton onClick={handleClinicDetails}>\r\n          <VisibilityIcon />\r\n        </IconButton>\r\n        <IconButton onClick={handleDeleteClinic}>\r\n          <DeleteIcon />\r\n        </IconButton>\r\n      </>\r\n    );\r\n    return clinic;\r\n  });\r\n}\r\n\r\ninterface ClinicsTableProps {\r\n  clinics: Clinic[];\r\n  deleteClinic: (clinic: Clinic) => Promise<void>;\r\n  openClinicForm: (clinic?: Clinic) => void;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      marginTop: '64px',\r\n      width: '100%',\r\n    },\r\n  })\r\n);\r\n\r\nexport default function ClinicsTable(props: ClinicsTableProps) {\r\n  const classes = useStyles();\r\n  const [rows, setRows] = useState<ClinicTableData[]>([]);\r\n\r\n  const { clinics, deleteClinic, openClinicForm } = props;\r\n\r\n  useEffect(() => {\r\n    setRows(setClinicsIntoTable(clinics, deleteClinic, openClinicForm));\r\n  }, [clinics, deleteClinic, openClinicForm]);\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      className={classes.root}\r\n      spacing={1}\r\n      alignItems=\"flex-end\"\r\n      justifyContent=\"flex-end\"\r\n    >\r\n      <OrangeButton\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        onClick={() => props.openClinicForm()}\r\n      >\r\n        Cadastrar nova clínica\r\n      </OrangeButton>\r\n      <GenericTable columns={columns} rows={rows} />\r\n    </Grid>\r\n  );\r\n}\r\n","import { useState } from 'react';\r\nimport { UserAuth } from '../models/UserAuth';\r\n\r\nexport default function useAuth(): [\r\n  token: UserAuth,\r\n  saveToken: (userToken?: UserAuth) => void\r\n] {\r\n  const getAuth = () => {\r\n    const tokenString = localStorage.getItem('auth') || '{}';\r\n    const userToken: UserAuth = JSON.parse(tokenString);\r\n    return userToken;\r\n  };\r\n\r\n  const [auth, setAuth] = useState(getAuth());\r\n\r\n  const saveAuth = (userAuth?: UserAuth) => {\r\n    if (userAuth) {\r\n      localStorage.setItem('auth', JSON.stringify(userAuth));\r\n      setAuth(userAuth);\r\n    } else {\r\n      localStorage.removeItem('auth');\r\n    }\r\n  };\r\n\r\n  return [auth, saveAuth];\r\n}\r\n","import React, { useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { deepOrange } from '@material-ui/core/colors';\r\nimport { OrangeButton, OutlinedButton } from '../Buttons';\r\nimport { Clinic } from '../../models/Clinic';\r\nimport { ClinicPayload } from '../../interfaces';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      marginTop: '64px',\r\n      width: '100%',\r\n      padding: theme.spacing(4),\r\n    },\r\n    headerSection: {\r\n      color: deepOrange[500],\r\n    },\r\n    ownerHeaderSection: {\r\n      marginTop: theme.spacing(4),\r\n    },\r\n    footerSection: {\r\n      marginTop: theme.spacing(4),\r\n    },\r\n  })\r\n);\r\n\r\ninterface ClinicFormProps {\r\n  currentClinic?: Clinic;\r\n  openClinicsTablePage: () => void;\r\n  setClinic: (id: number | undefined, payload: ClinicPayload) => Promise<void>;\r\n}\r\n\r\nexport default function ClinicForm(props: ClinicFormProps) {\r\n  const { currentClinic, setClinic } = props;\r\n  const [clinicName, setClinicName] = useState<string>(\r\n    currentClinic?.name || ''\r\n  );\r\n  const [taxId, setTaxId] = useState<string>(currentClinic?.tax_id || '');\r\n  const [zipcode, setZipcode] = useState<string>(\r\n    currentClinic?.address_zipcode?.toString() || ''\r\n  );\r\n  const [streetAddress, setStreetAddress] = useState<string>(\r\n    currentClinic?.address_street || ''\r\n  );\r\n  const [city, setCity] = useState<string>(currentClinic?.address_city || '');\r\n  const [stateAddress, setStateAddress] = useState<string>(\r\n    currentClinic?.address_state || ''\r\n  );\r\n  const [phone, setPhone] = useState<string>(currentClinic?.phone || '');\r\n  // TODO: Need to get owner's data. Get clinic is not returning them\r\n  const [ownerName, setOwnerName] = useState<string>(\r\n    currentClinic?.owner?.name || ''\r\n  );\r\n  const [ownerEmail, setOwnerEmail] = useState<string>(\r\n    currentClinic?.owner?.email || ''\r\n  );\r\n  const [ownerPassword, setOwnerPassword] = useState<string>('');\r\n  const classes = useStyles();\r\n\r\n  const handleSetClinic = async (e: React.SyntheticEvent) => {\r\n    e.preventDefault();\r\n    const payload = {\r\n      name: clinicName,\r\n      tax_id: taxId,\r\n      address_zipcode: zipcode,\r\n      address_street: streetAddress,\r\n      address_city: city,\r\n      address_state: stateAddress,\r\n      phone,\r\n      user: {\r\n        name: ownerName,\r\n        email: ownerEmail,\r\n        password: ownerPassword,\r\n      },\r\n    };\r\n    setClinic(currentClinic?.id, payload);\r\n  };\r\n  return (\r\n    <Paper className={classes.root}>\r\n      <form onSubmit={handleSetClinic}>\r\n        <Grid\r\n          container\r\n          justifyContent=\"flex-start\"\r\n          alignItems=\"flex-start\"\r\n          alignContent=\"flex-start\"\r\n        >\r\n          <Typography\r\n            variant=\"h6\"\r\n            gutterBottom\r\n            className={classes.headerSection}\r\n          >\r\n            Dados da clínica\r\n          </Typography>\r\n        </Grid>\r\n        <Grid container spacing={4}>\r\n          <Grid item xs={6}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"clinic-name-input\"\r\n              label=\"Nome da clínica\"\r\n              defaultValue={clinicName}\r\n              onChange={(e) => setClinicName(e.target.value)}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"tax-id-input\"\r\n              label=\"CNPJ/CPF\"\r\n              defaultValue={taxId}\r\n              onChange={(e) => setTaxId(e.target.value)}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"zipcode-input\"\r\n              label=\"CEP\"\r\n              defaultValue={zipcode}\r\n              onChange={(e) => setZipcode(e.target.value)}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={8}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"street-address-input\"\r\n              label=\"Logradouro\"\r\n              defaultValue={streetAddress}\r\n              onChange={(e) => setStreetAddress(e.target.value)}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={5}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"city-input\"\r\n              label=\"Cidade\"\r\n              defaultValue={city}\r\n              onChange={(e) => setCity(e.target.value)}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={2}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"state-address-input\"\r\n              label=\"Estado\"\r\n              defaultValue={stateAddress}\r\n              onChange={(e) => setStateAddress(e.target.value)}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={5}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"phone-input\"\r\n              label=\"Telefone\"\r\n              defaultValue={phone}\r\n              onChange={(e) => setPhone(e.target.value)}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid\r\n          container\r\n          justifyContent=\"flex-start\"\r\n          alignItems=\"flex-start\"\r\n          alignContent=\"flex-start\"\r\n        >\r\n          <Typography\r\n            variant=\"h6\"\r\n            gutterBottom\r\n            className={clsx(classes.headerSection, classes.ownerHeaderSection)}\r\n          >\r\n            Dados da proprietário\r\n          </Typography>\r\n        </Grid>\r\n        <Grid container spacing={4}>\r\n          <Grid item xs={4}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"owner-name-input\"\r\n              label=\"Nome do proprietário\"\r\n              defaultValue={ownerName}\r\n              onChange={(e) => setOwnerName(e.target.value)}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"owner-email-input\"\r\n              label=\"Email do proprietário\"\r\n              defaultValue={ownerEmail}\r\n              disabled={!!currentClinic?.owner?.email}\r\n              onChange={(e) => setOwnerEmail(e.target.value)}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <TextField\r\n              fullWidth\r\n              type=\"password\"\r\n              id=\"owner-password-input\"\r\n              label=\"Senha do proprietário\"\r\n              defaultValue={ownerPassword}\r\n              onChange={(e) => setOwnerPassword(e.target.value)}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        <Grid\r\n          container\r\n          justifyContent=\"center\"\r\n          alignItems=\"center\"\r\n          alignContent=\"center\"\r\n          className={classes.footerSection}\r\n        >\r\n          <OutlinedButton\r\n            variant=\"outlined\"\r\n            onClick={props.openClinicsTablePage}\r\n          >\r\n            Cancelar\r\n          </OutlinedButton>\r\n          <OrangeButton type=\"submit\">Salvar</OrangeButton>\r\n        </Grid>\r\n      </form>\r\n    </Paper>\r\n  );\r\n}\r\n","import { Dispatch } from 'react';\r\nimport { baseUrl, getAuth } from '../utils/loggedUser';\r\n\r\nexport enum IActions {\r\n  TERMS_FETCHED,\r\n  TERMS_UPDATED,\r\n}\r\n\r\nexport interface ITermsDispatchProps {\r\n  type: IActions;\r\n  terms: string;\r\n}\r\n\r\nexport function getTermsOfUse() {\r\n  return async (dispatch: Dispatch<ITermsDispatchProps>) => {\r\n    const response = await fetch(`${baseUrl}/api/v1/terms`, {\r\n      method: 'GET',\r\n      headers: {\r\n        Authorization: `Bearer ${getAuth().token}`,\r\n      },\r\n    }).then((data) => data.json());\r\n\r\n    dispatch({ type: IActions.TERMS_FETCHED, terms: response.term });\r\n  };\r\n}\r\n\r\nexport function setTermsOfUse(text: string) {\r\n  return async (dispatch: Dispatch<ITermsDispatchProps>) => {\r\n    const response = await fetch(`${baseUrl}/api/v1/terms/1`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        Authorization: `Bearer ${getAuth().token}`,\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ text }),\r\n    });\r\n\r\n    if (response.ok) {\r\n      dispatch({ type: IActions.TERMS_UPDATED, terms: text });\r\n    }\r\n  };\r\n}\r\n","import { IActions, ITermsDispatchProps } from '../actions/term';\r\n\r\nexport default function termsReducer(\r\n  state: string,\r\n  action: ITermsDispatchProps\r\n) {\r\n  const { type } = action;\r\n  switch (type) {\r\n    case IActions.TERMS_FETCHED:\r\n      return action.terms;\r\n    case IActions.TERMS_UPDATED:\r\n      return action.terms;\r\n  }\r\n}\r\n","import React, { useEffect, useReducer } from 'react';\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { deepOrange } from '@material-ui/core/colors';\r\nimport { OrangeButton } from '../Buttons';\r\nimport termsReducer from '../../reducers/term';\r\nimport { getTermsOfUse, setTermsOfUse } from '../../actions/term';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      marginTop: '64px',\r\n      width: '100%',\r\n      padding: theme.spacing(4),\r\n    },\r\n    headerSection: {\r\n      color: deepOrange[500],\r\n    },\r\n    textarea: {\r\n      width: '100%',\r\n    },\r\n  })\r\n);\r\n\r\nexport default function Settings() {\r\n  const classes = useStyles();\r\n  const [tou, dispatch] = useReducer(termsReducer, '');\r\n  useEffect(() => {\r\n    getTermsOfUse()(dispatch);\r\n  }, []);\r\n\r\n  const handleSetTerms = async (e: React.SyntheticEvent) => {\r\n    e.preventDefault();\r\n    setTermsOfUse(\r\n      ((e.target as HTMLFormElement)[0] as HTMLTextAreaElement).value\r\n    )(dispatch);\r\n  };\r\n\r\n  return (\r\n    <Paper className={classes.root}>\r\n      <Grid\r\n        container\r\n        justifyContent=\"flex-start\"\r\n        alignItems=\"flex-start\"\r\n        alignContent=\"flex-start\"\r\n      >\r\n        <Typography variant=\"h6\" gutterBottom className={classes.headerSection}>\r\n          Termos de uso\r\n        </Typography>\r\n      </Grid>\r\n      <form onSubmit={handleSetTerms}>\r\n        <Grid\r\n          container\r\n          justifyContent=\"flex-end\"\r\n          alignItems=\"flex-end\"\r\n          alignContent=\"flex-end\"\r\n        >\r\n          <Grid item xs={12}>\r\n            <TextareaAutosize\r\n              minRows={10}\r\n              placeholder=\"Digite os termos de uso aqui...\"\r\n              defaultValue={tou}\r\n              className={classes.textarea}\r\n            />\r\n          </Grid>\r\n          <OrangeButton type=\"submit\">Salvar</OrangeButton>\r\n        </Grid>\r\n      </form>\r\n    </Paper>\r\n  );\r\n}\r\n","import { Dispatch } from 'react';\r\nimport { ClinicPayload } from '../interfaces';\r\nimport { Clinic } from '../models/Clinic';\r\nimport { baseUrl, getAuth } from '../utils/loggedUser';\r\n\r\nexport enum IActions {\r\n  CLINICS_FETCHED,\r\n  // CLINIC_FETCHED,\r\n  CLINIC_CREATED,\r\n  CLINIC_DELETED,\r\n  CLINIC_UPDATED,\r\n}\r\n\r\nexport interface IClinicsDispatchProps {\r\n  type: IActions;\r\n  clinics: Clinic[];\r\n}\r\n\r\nexport function getClinics() {\r\n  return async (dispatch: Dispatch<IClinicsDispatchProps>) => {\r\n    const response = await fetch(`${baseUrl}/api/v1/clinics`, {\r\n      method: 'GET',\r\n      headers: {\r\n        Authorization: `Bearer ${getAuth().token}`,\r\n      },\r\n    }).then((data) => data.json());\r\n\r\n    dispatch({ type: IActions.CLINICS_FETCHED, clinics: response.clinics });\r\n  };\r\n}\r\n\r\n// export async function getClinic(id: number) {\r\n//   return fetch(`${baseUrl}/api/v1/clinics/${id}`, {\r\n//     method: 'GET',\r\n//     headers: {\r\n//       Authorization: `Bearer ${getAuth().token}`,\r\n//     },\r\n//   }).then((data) => data.json());\r\n// }\r\n\r\nexport function deleteClinic(clinic: Clinic) {\r\n  return async (dispatch: Dispatch<IClinicsDispatchProps>) => {\r\n    const response = await fetch(`${baseUrl}/api/v1/clinics/${clinic.id}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        Authorization: `Bearer ${getAuth().token}`,\r\n      },\r\n    });\r\n    if (response.ok) {\r\n      dispatch({ type: IActions.CLINIC_DELETED, clinics: [clinic] });\r\n    }\r\n  };\r\n}\r\n\r\nexport function createClinic(clinic: ClinicPayload) {\r\n  return async (dispatch: Dispatch<IClinicsDispatchProps>) => {\r\n    const response = await fetch(`${baseUrl}/api/v1/clinics`, {\r\n      method: 'POST',\r\n      headers: {\r\n        Authorization: `Bearer ${getAuth().token}`,\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(clinic),\r\n    }).then((data) => data.json());\r\n    dispatch({ type: IActions.CLINIC_CREATED, clinics: [response.clinic] });\r\n  };\r\n}\r\n\r\nexport function updateClinic(id: number, clinic: ClinicPayload) {\r\n  return async (dispatch: Dispatch<IClinicsDispatchProps>) => {\r\n    const response = await fetch(`${baseUrl}/api/v1/clinics/${id}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        Authorization: `Bearer ${getAuth().token}`,\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(clinic),\r\n    }).then((data) => data.json());\r\n\r\n    dispatch({ type: IActions.CLINIC_UPDATED, clinics: [response.clinic] });\r\n  };\r\n}\r\n","import { IActions, IClinicsDispatchProps } from '../actions/clinic';\r\nimport { Clinic } from '../models/Clinic';\r\n\r\nexport default function clinicReducer(\r\n  state: Clinic[],\r\n  action: IClinicsDispatchProps\r\n) {\r\n  const { type } = action;\r\n  switch (type) {\r\n    case IActions.CLINICS_FETCHED:\r\n      return action.clinics;\r\n    case IActions.CLINIC_CREATED:\r\n      return [...state, ...action.clinics];\r\n    case IActions.CLINIC_DELETED:\r\n      return state.filter(\r\n        (clinic: Clinic) => clinic.id !== action.clinics[0].id\r\n      );\r\n    case IActions.CLINIC_UPDATED:\r\n      return state.map((clinic: Clinic) => {\r\n        if (clinic.id === action.clinics[0].id) {\r\n          return action.clinics[0];\r\n        }\r\n        return clinic;\r\n      });\r\n  }\r\n}\r\n","import { useEffect, useReducer, useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\n\r\nimport LeftNav from '../LeftNav';\r\nimport ClinicsTable from './ClinicsTable';\r\nimport ClinicForm from './ClinicForm';\r\nimport { AdminPanelType, AllPanelTypes, ClinicPayload } from '../../interfaces';\r\nimport { Clinic } from '../../models/Clinic';\r\nimport Settings from './Settings';\r\nimport clinicReducer from '../../reducers/clinic';\r\nimport {\r\n  createClinic,\r\n  deleteClinic,\r\n  getClinics,\r\n  updateClinic,\r\n} from '../../actions/clinic';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    appRoot: {\r\n      display: 'flex',\r\n    },\r\n    toolbar: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'flex-end',\r\n      padding: theme.spacing(0, 1),\r\n      // necessary for content to be below app bar\r\n      ...theme.mixins.toolbar,\r\n    },\r\n    content: {\r\n      flexGrow: 1,\r\n      padding: theme.spacing(3),\r\n    },\r\n  })\r\n);\r\n\r\nfunction AdminPage() {\r\n  const classes = useStyles();\r\n  const [panel, setPanel] = useState<AdminPanelType>(\r\n    AdminPanelType.ClinicsTable\r\n  );\r\n  const [currentClinic, setCurrentClinic] = useState<Clinic>();\r\n  const [clinics, dispatch] = useReducer(clinicReducer, []);\r\n\r\n  const setClinic = async (id: number | undefined, payload: ClinicPayload) => {\r\n    if (id) {\r\n      await updateClinic(id, payload)(dispatch);\r\n    } else {\r\n      await createClinic(payload)(dispatch);\r\n    }\r\n    setPanel(AdminPanelType.ClinicsTable);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getClinics()(dispatch);\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      className={clsx({\r\n        [classes.appRoot]: true,\r\n      })}\r\n    >\r\n      <CssBaseline />\r\n      <LeftNav\r\n        role=\"admin\"\r\n        currentPanel={panel}\r\n        openClinicsTablePage={() => setPanel(AdminPanelType.ClinicsTable)}\r\n        openTermsOfUsePage={() => setPanel(AdminPanelType.Settings)}\r\n        setPanel={(panel: AllPanelTypes) => setPanel(panel as AdminPanelType)}\r\n      />\r\n      <main className={classes.content}>\r\n        {panel === AdminPanelType.ClinicsTable && (\r\n          <ClinicsTable\r\n            clinics={clinics}\r\n            deleteClinic={(clinic: Clinic) => deleteClinic(clinic)(dispatch)}\r\n            openClinicForm={(clinic?: Clinic) => {\r\n              setCurrentClinic(clinic);\r\n              setPanel(AdminPanelType.ClinicForm);\r\n            }}\r\n          />\r\n        )}\r\n        {panel === AdminPanelType.ClinicForm && (\r\n          <ClinicForm\r\n            currentClinic={currentClinic}\r\n            openClinicsTablePage={() => setPanel(AdminPanelType.ClinicsTable)}\r\n            setClinic={setClinic}\r\n          />\r\n        )}\r\n        {panel === AdminPanelType.Settings && <Settings />}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AdminPage;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { UserTableColumn, UserTableData } from '../../interfaces';\r\nimport GenericTable from '../GenericTable';\r\nimport { OrangeButton } from '../Buttons';\r\nimport { User } from '../../models/User';\r\n\r\nconst columns: UserTableColumn[] = [\r\n  // { id: 'id', label: 'ID' },\r\n  { id: 'name', label: 'Nome', minWidth: 100 },\r\n  { id: 'tax_id', label: 'CPF/CNPJ', minWidth: 50 },\r\n  { id: 'email', label: 'E-mail', minWidth: 100 },\r\n  { id: 'address_zipcode', label: 'CEP', minWidth: 50 },\r\n  { id: 'address_street', label: 'Endereço', minWidth: 100 },\r\n  { id: 'address_city', label: 'Cidade', minWidth: 50 },\r\n  { id: 'address_state', label: 'Estado', minWidth: 10 },\r\n  { id: 'crm', label: 'CRM', minWidth: 50 },\r\n  { id: 'phone', label: 'Telefone', minWidth: 50 },\r\n  { id: 'details', label: 'Detalhes', minWidth: 50 },\r\n];\r\n\r\nfunction setUsersIntoTable(\r\n  users: User[],\r\n  deleteUser: (user: User) => Promise<void>,\r\n  openUserForm: (user?: User) => void\r\n) {\r\n  return users.map((user: UserTableData) => {\r\n    const handleUserDetails = async (e: React.SyntheticEvent) => {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n      openUserForm(user);\r\n    };\r\n    const handleDeleteUser = async (e: React.SyntheticEvent) => {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n      deleteUser(user);\r\n    };\r\n\r\n    user.details = (\r\n      <>\r\n        <IconButton onClick={handleUserDetails}>\r\n          <VisibilityIcon />\r\n        </IconButton>\r\n        <IconButton onClick={handleDeleteUser}>\r\n          <DeleteIcon />\r\n        </IconButton>\r\n      </>\r\n    );\r\n    return user;\r\n  });\r\n}\r\n\r\ninterface UsersTableProps {\r\n  users: User[];\r\n  deleteUser: (user: User) => Promise<void>;\r\n  openUserForm: (user?: User) => void;\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      marginTop: '64px',\r\n      width: '100%',\r\n    },\r\n  })\r\n);\r\n\r\nexport default function UsersTable(props: UsersTableProps) {\r\n  const classes = useStyles();\r\n  const [rows, setRows] = useState<UserTableData[]>([]);\r\n\r\n  const { deleteUser, openUserForm, users } = props;\r\n\r\n  useEffect(() => {\r\n    setRows(setUsersIntoTable(users, deleteUser, openUserForm));\r\n  }, [users, deleteUser, openUserForm]);\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      className={classes.root}\r\n      spacing={1}\r\n      alignItems=\"flex-end\"\r\n      justifyContent=\"flex-end\"\r\n    >\r\n      <OrangeButton\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        onClick={() => props.openUserForm()}\r\n      >\r\n        Cadastrar novo Usuário\r\n      </OrangeButton>\r\n      <GenericTable columns={columns} rows={rows} />\r\n    </Grid>\r\n  );\r\n}\r\n","import { Dispatch } from 'react';\r\nimport { UserPayload } from '../interfaces';\r\nimport { User } from '../models/User';\r\nimport { baseUrl, getAuth } from '../utils/loggedUser';\r\n\r\nexport enum IActions {\r\n  USERS_FETCHED,\r\n  // USER_FETCHED,\r\n  USER_CREATED,\r\n  USER_DELETED,\r\n  USER_UPDATED,\r\n}\r\n\r\nexport interface IUsersDispatchProps {\r\n  type: IActions;\r\n  users: User[];\r\n}\r\n\r\nexport function getUsers() {\r\n  return async (dispatch: Dispatch<IUsersDispatchProps>) => {\r\n    const response = await fetch(`${baseUrl}/api/v1/users`, {\r\n      method: 'GET',\r\n      headers: {\r\n        Authorization: `Bearer ${getAuth().token}`,\r\n      },\r\n    }).then((data) => data.json());\r\n\r\n    dispatch({ type: IActions.USERS_FETCHED, users: response.users });\r\n  };\r\n}\r\n\r\nexport function deleteUser(user: User) {\r\n  return async (dispatch: Dispatch<IUsersDispatchProps>) => {\r\n    const response = await fetch(`${baseUrl}/api/v1/users/${user.id}`, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        Authorization: `Bearer ${getAuth().token}`,\r\n      },\r\n    });\r\n    if (response.ok) {\r\n      dispatch({ type: IActions.USER_DELETED, users: [user] });\r\n    }\r\n  };\r\n}\r\n\r\nexport function createUser(user: UserPayload) {\r\n  return async (dispatch: Dispatch<IUsersDispatchProps>) => {\r\n    const response = await fetch(`${baseUrl}/api/v1/users`, {\r\n      method: 'POST',\r\n      headers: {\r\n        Authorization: `Bearer ${getAuth().token}`,\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(user),\r\n    }).then((data) => data.json());\r\n    dispatch({ type: IActions.USER_CREATED, users: [response.user] });\r\n  };\r\n}\r\n\r\nexport function updateUser(id: number, user: UserPayload) {\r\n  return async (dispatch: Dispatch<IUsersDispatchProps>) => {\r\n    const response = await fetch(`${baseUrl}/api/v1/users/${id}`, {\r\n      method: 'PUT',\r\n      headers: {\r\n        Authorization: `Bearer ${getAuth().token}`,\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(user),\r\n    }).then((data) => data.json());\r\n\r\n    dispatch({ type: IActions.USER_UPDATED, users: [response.user] });\r\n  };\r\n}\r\n","import { IActions, IUsersDispatchProps } from '../actions/user';\r\nimport { User } from '../models/User';\r\n\r\nexport default function userReducer(\r\n  state: User[],\r\n  action: IUsersDispatchProps\r\n) {\r\n  const { type } = action;\r\n  switch (type) {\r\n    case IActions.USERS_FETCHED:\r\n      return action.users;\r\n    case IActions.USER_CREATED:\r\n      return [...state, ...action.users];\r\n    case IActions.USER_DELETED:\r\n      return state.filter((user: User) => user.id !== action.users[0].id);\r\n    case IActions.USER_UPDATED:\r\n      return state.map((user: User) => {\r\n        if (user.id === action.users[0].id) {\r\n          return action.users[0];\r\n        }\r\n        return user;\r\n      });\r\n  }\r\n}\r\n","import React, { useState } from 'react';\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { deepOrange } from '@material-ui/core/colors';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Select from '@material-ui/core/Select';\r\nimport { OrangeButton, OutlinedButton } from '../Buttons';\r\nimport { User } from '../../models/User';\r\nimport { UserPayload } from '../../interfaces';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      marginTop: '64px',\r\n      width: '100%',\r\n      padding: theme.spacing(4),\r\n    },\r\n    headerSection: {\r\n      color: deepOrange[500],\r\n    },\r\n    ownerHeaderSection: {\r\n      marginTop: theme.spacing(4),\r\n    },\r\n    footerSection: {\r\n      marginTop: theme.spacing(4),\r\n    },\r\n  })\r\n);\r\n\r\ninterface UserFormProps {\r\n  currentUser?: User;\r\n  openUsersTablePage: () => void;\r\n  setUser: (id: number | undefined, payload: UserPayload) => Promise<void>;\r\n}\r\n\r\nconst roleOptions = [\r\n  { value: 'MANAGER', label: 'Gerente' },\r\n  { value: 'PHYSICIAN', label: 'Médico' },\r\n  { value: 'RECEPTIONIST', label: 'Recepcionista' },\r\n];\r\n\r\nexport default function UserForm(props: UserFormProps) {\r\n  const { currentUser, setUser } = props;\r\n  const [userName, setUserName] = useState<string>(currentUser?.name || '');\r\n  const [taxId, setTaxId] = useState<string>(currentUser?.tax_id || '');\r\n  const [password, setPassword] = useState<string>('');\r\n  const [email, setEmail] = useState<string>(currentUser?.email || '');\r\n\r\n  const [zipcode, setZipcode] = useState<string>(\r\n    currentUser?.address_zipcode?.toString() || ''\r\n  );\r\n  const [streetAddress, setStreetAddress] = useState<string>(\r\n    currentUser?.address_street || ''\r\n  );\r\n  const [city, setCity] = useState<string>(currentUser?.address_city || '');\r\n  const [stateAddress, setStateAddress] = useState<string>(\r\n    currentUser?.address_state || ''\r\n  );\r\n  const [phone, setPhone] = useState<string>(currentUser?.phone || '');\r\n  const [crm, setCrm] = useState<string>(currentUser?.crm || '');\r\n  const currentRole =\r\n    currentUser?.roles &&\r\n    (Array.isArray(currentUser.roles)\r\n      ? currentUser.roles[0]\r\n      : currentUser.roles);\r\n  const [role, setRole] = useState<string>(currentRole || roleOptions[0].value);\r\n  const classes = useStyles();\r\n\r\n  const handleSetUser = async (e: React.SyntheticEvent) => {\r\n    e.preventDefault();\r\n    const payload = {\r\n      name: userName,\r\n      tax_id: taxId,\r\n      password,\r\n      address_zipcode: zipcode,\r\n      address_street: streetAddress,\r\n      address_city: city,\r\n      address_state: stateAddress,\r\n      phone,\r\n      crm,\r\n      role,\r\n    };\r\n    setUser(\r\n      currentUser?.id,\r\n      currentUser?.id ? payload : { ...payload, email: email }\r\n    );\r\n  };\r\n  return (\r\n    <Paper className={classes.root}>\r\n      <form onSubmit={handleSetUser}>\r\n        <Grid\r\n          container\r\n          justifyContent=\"flex-start\"\r\n          alignItems=\"flex-start\"\r\n          alignContent=\"flex-start\"\r\n        >\r\n          <Typography\r\n            variant=\"h6\"\r\n            gutterBottom\r\n            className={classes.headerSection}\r\n          >\r\n            Dados do Usuário\r\n          </Typography>\r\n        </Grid>\r\n        <Grid container spacing={4}>\r\n          <Grid item xs={5}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"user-name-input\"\r\n              label=\"Nome do usuário\"\r\n              defaultValue={userName}\r\n              onChange={(e) => setUserName(e.target.value)}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"tax-id-input\"\r\n              label=\"CNPJ/CPF\"\r\n              defaultValue={taxId}\r\n              onChange={(e) => setTaxId(e.target.value)}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={3}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"crm-input\"\r\n              label=\"CRM\"\r\n              defaultValue={crm}\r\n              onChange={(e) => setCrm(e.target.value)}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"email-input\"\r\n              label=\"E-mail\"\r\n              defaultValue={email}\r\n              disabled={!!currentUser?.email}\r\n              onChange={(e) => setEmail(e.target.value)}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"password-input\"\r\n              label=\"Senha\"\r\n              defaultValue={password}\r\n              onChange={(e) => setPassword(e.target.value)}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <FormControl>\r\n              <InputLabel htmlFor=\"role-select\">Perfil</InputLabel>\r\n              <Select\r\n                native\r\n                id=\"role-select\"\r\n                value={role}\r\n                onChange={(e) => setRole(e.target.value as string)}\r\n              >\r\n                {roleOptions.map((roleOption) => (\r\n                  <option key={roleOption.value} value={roleOption.value}>\r\n                    {roleOption.label}\r\n                  </option>\r\n                ))}\r\n              </Select>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"zipcode-input\"\r\n              label=\"CEP\"\r\n              defaultValue={zipcode}\r\n              onChange={(e) => setZipcode(e.target.value)}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={8}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"street-address-input\"\r\n              label=\"Logradouro\"\r\n              defaultValue={streetAddress}\r\n              onChange={(e) => setStreetAddress(e.target.value)}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={5}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"city-input\"\r\n              label=\"Cidade\"\r\n              defaultValue={city}\r\n              onChange={(e) => setCity(e.target.value)}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={2}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"state-address-input\"\r\n              label=\"Estado\"\r\n              defaultValue={stateAddress}\r\n              onChange={(e) => setStateAddress(e.target.value)}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={5}>\r\n            <TextField\r\n              fullWidth\r\n              id=\"phone-input\"\r\n              label=\"Telefone\"\r\n              defaultValue={phone}\r\n              onChange={(e) => setPhone(e.target.value)}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        <Grid\r\n          container\r\n          justifyContent=\"center\"\r\n          alignItems=\"center\"\r\n          alignContent=\"center\"\r\n          className={classes.footerSection}\r\n        >\r\n          <OutlinedButton variant=\"outlined\" onClick={props.openUsersTablePage}>\r\n            Cancelar\r\n          </OutlinedButton>\r\n          <OrangeButton type=\"submit\">Salvar</OrangeButton>\r\n        </Grid>\r\n      </form>\r\n    </Paper>\r\n  );\r\n}\r\n","import { useEffect, useReducer, useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\n\r\nimport LeftNav from '../LeftNav';\r\nimport {\r\n  AllPanelTypes,\r\n  ManagerPanelType,\r\n  PatientPayload,\r\n  UserPayload,\r\n} from '../../interfaces';\r\nimport UsersTable from './UsersTable';\r\nimport userReducer from '../../reducers/user';\r\nimport {\r\n  getUsers,\r\n  deleteUser,\r\n  updateUser,\r\n  createUser,\r\n} from '../../actions/user';\r\nimport { User } from '../../models/User';\r\nimport UserForm from './UserForm';\r\nimport patientReducer from '../../reducers/patient';\r\nimport questionaireReducer from '../../reducers/questionaire';\r\nimport { Patient } from '../../models/Patient';\r\nimport {\r\n  createPatient,\r\n  deletePatient,\r\n  getPatients,\r\n  updatePatient,\r\n} from '../../actions/patient';\r\nimport {\r\n  clearQuestionaires,\r\n  getQuestionaires,\r\n  sendQuestionaires,\r\n} from '../../actions/questionaire';\r\nimport PatientsTable from '../common/PatientsTable';\r\nimport PatientForm from '../common/PatientForm';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    appRoot: {\r\n      display: 'flex',\r\n    },\r\n    toolbar: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'flex-end',\r\n      padding: theme.spacing(0, 1),\r\n      // necessary for content to be below app bar\r\n      ...theme.mixins.toolbar,\r\n    },\r\n    content: {\r\n      flexGrow: 1,\r\n      padding: theme.spacing(3),\r\n    },\r\n  })\r\n);\r\n\r\nexport default function ManagerPage() {\r\n  const classes = useStyles();\r\n  const [panel, setPanel] = useState<ManagerPanelType>(\r\n    ManagerPanelType.UsersTable\r\n  );\r\n  const [currentUser, setCurrentUser] = useState<User>();\r\n  const [users, usersDispatch] = useReducer(userReducer, []);\r\n  const [currentPatient, setCurrentPatient] = useState<Patient>();\r\n\r\n  const [patients, patientDispatch] = useReducer(patientReducer, []);\r\n  const [questionaires, questionairesDispatch] = useReducer(\r\n    questionaireReducer,\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    getUsers()(usersDispatch);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getPatients()(patientDispatch);\r\n  }, []);\r\n\r\n  const setUser = async (id: number | undefined, payload: UserPayload) => {\r\n    if (id) {\r\n      await updateUser(id, payload)(usersDispatch);\r\n    } else {\r\n      await createUser(payload)(usersDispatch);\r\n    }\r\n    setPanel(ManagerPanelType.UsersTable);\r\n  };\r\n\r\n  const setPatient = async (\r\n    id: number | undefined,\r\n    patientPayload: PatientPayload,\r\n    questionairePayload: string[]\r\n  ) => {\r\n    let newPatient;\r\n    if (id) {\r\n      delete patientPayload.email;\r\n      await updatePatient(id, patientPayload)(patientDispatch);\r\n    } else {\r\n      newPatient = await createPatient(patientPayload)(patientDispatch);\r\n    }\r\n    await sendQuestionaires(\r\n      id ?? newPatient.id,\r\n      questionairePayload\r\n    )(questionairesDispatch);\r\n    setPanel(ManagerPanelType.PatientsTable);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={clsx({\r\n        [classes.appRoot]: true,\r\n      })}\r\n    >\r\n      <CssBaseline />\r\n      <LeftNav\r\n        role=\"manager\"\r\n        currentPanel={panel}\r\n        setPanel={(panel: AllPanelTypes) => setPanel(panel as ManagerPanelType)}\r\n      />\r\n      <main className={classes.content}>\r\n        {panel === ManagerPanelType.UsersTable && (\r\n          <UsersTable\r\n            users={users}\r\n            deleteUser={(user: User) => deleteUser(user)(usersDispatch)}\r\n            openUserForm={(user?: User) => {\r\n              setCurrentUser(user);\r\n              setPanel(ManagerPanelType.UserForm);\r\n            }}\r\n          />\r\n        )}\r\n        {panel === ManagerPanelType.UserForm && (\r\n          <UserForm\r\n            currentUser={currentUser}\r\n            setUser={setUser}\r\n            openUsersTablePage={() => setPanel(ManagerPanelType.UsersTable)}\r\n          />\r\n        )}\r\n        {panel === ManagerPanelType.PatientsTable && (\r\n          <PatientsTable\r\n            patients={patients}\r\n            deletePatient={(patient: Patient) =>\r\n              deletePatient(patient)(patientDispatch)\r\n            }\r\n            openPatientForm={async (patient?: Patient) => {\r\n              setCurrentPatient(patient);\r\n              patient\r\n                ? await getQuestionaires(patient.id)(questionairesDispatch)\r\n                : clearQuestionaires()(questionairesDispatch);\r\n              setPanel(ManagerPanelType.PatientForm);\r\n            }}\r\n          />\r\n        )}\r\n        {panel === ManagerPanelType.PatientForm && (\r\n          <PatientForm\r\n            currentPatient={currentPatient}\r\n            setPatient={setPatient}\r\n            questionaires={questionaires}\r\n            openPatientsTablePage={() =>\r\n              setPanel(ManagerPanelType.PatientsTable)\r\n            }\r\n          />\r\n        )}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n","import Button from '@material-ui/core/Button';\r\nimport { green } from '@material-ui/core/colors';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MobileStepper from '@material-ui/core/MobileStepper';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport {\r\n  makeStyles,\r\n  Theme,\r\n  withStyles,\r\n  createStyles,\r\n} from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { KeyboardArrowLeft, KeyboardArrowRight } from '@material-ui/icons';\r\nimport React from 'react';\r\n\r\nimport logo from '../../image/logo.svg';\r\nimport onBoardStep1 from '../../image/onboard-step-1.svg';\r\nimport onBoardStep2 from '../../image/onboard-step-2.svg';\r\nimport onBoardStep3 from '../../image/onboard-step-3.svg';\r\n\r\ninterface OnBoardProps {\r\n  setHasOnboardedToTrue: () => void;\r\n}\r\n\r\nconst tourSteps = [\r\n  {\r\n    title: 'Seja bem-vindo!',\r\n    label:\r\n      'A dor causa muitos prejuízos na vida das pessoas, gerando na maioria das vezes impacto negativo na qualidade de vida.',\r\n    imgPath: onBoardStep1,\r\n  },\r\n  {\r\n    title: 'Seja bem-vindo!',\r\n    label:\r\n      'Para que possamos compreender melhor a complexidade da sua dor, solicitamos que preencha os questionários a seguir que será de grande valia para que o profissional que irá te atender possa conhecer e analisar SUA dor e assim, planejar seu tratamento.',\r\n    imgPath: onBoardStep2,\r\n  },\r\n  {\r\n    title: 'Seja bem-vindo!',\r\n    label:\r\n      'É possível que seja necessário respondê-los em outras oportunidades novamente para que seja feito um seguimento da evolução do seu  tratamento. Caso tenha alguma dúvida chame o profissional que poderá te ajudar!',\r\n    imgPath: onBoardStep3,\r\n  },\r\n];\r\n\r\nconst LoginPatientButton = withStyles((theme: Theme) => ({\r\n  root: {\r\n    color: 'white',\r\n    backgroundColor: '#329D9C',\r\n    '&:hover:not(:disabled)': {\r\n      backgroundColor: green[500],\r\n    },\r\n  },\r\n}))(IconButton);\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    onboard: { paddingTop: '64px' },\r\n    tourTitle: {\r\n      padding: '1rem',\r\n    },\r\n    tourLabel: {\r\n      padding: '1rem',\r\n      height: '150px',\r\n    },\r\n    logo: {\r\n      marginBottom: '2rem',\r\n    },\r\n    img: {\r\n      height: 255,\r\n      maxWidth: 400,\r\n      overflow: 'hidden',\r\n      display: 'block',\r\n      width: '100%',\r\n    },\r\n    greenColor: {\r\n      color: '#329D9C',\r\n    },\r\n  })\r\n);\r\n\r\nexport default function OnBoard(props: OnBoardProps) {\r\n  const classes = useStyles();\r\n  const [activeStep, setActiveStep] = React.useState(0);\r\n  const maxSteps = tourSteps.length;\r\n\r\n  const handleNext = () => {\r\n    if (activeStep + 1 === maxSteps) {\r\n      setHasOnboardedToTrue();\r\n    } else {\r\n      setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n    }\r\n  };\r\n\r\n  const handleBack = () => {\r\n    setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n  };\r\n\r\n  const { setHasOnboardedToTrue } = props;\r\n  return (\r\n    <div className={classes.onboard}>\r\n      <img src={logo} className={classes.logo} alt=\"Logo da Ador\" />\r\n      <img\r\n        className={classes.img}\r\n        src={tourSteps[activeStep].imgPath}\r\n        alt={tourSteps[activeStep].label}\r\n      />\r\n      <Paper square elevation={0} className={classes.tourTitle}>\r\n        <Typography variant=\"h6\" component=\"h1\">\r\n          {tourSteps[activeStep].title}\r\n        </Typography>\r\n      </Paper>\r\n      <Paper square elevation={0} className={classes.tourLabel}>\r\n        <Typography variant=\"body1\">{tourSteps[activeStep].label}</Typography>\r\n      </Paper>\r\n      <MobileStepper\r\n        steps={maxSteps}\r\n        position=\"static\"\r\n        variant=\"dots\"\r\n        activeStep={activeStep}\r\n        nextButton={\r\n          <LoginPatientButton\r\n            size=\"small\"\r\n            onClick={handleNext}\r\n            disabled={activeStep === maxSteps}\r\n          >\r\n            <KeyboardArrowRight />\r\n          </LoginPatientButton>\r\n        }\r\n        backButton={\r\n          <LoginPatientButton\r\n            size=\"small\"\r\n            onClick={handleBack}\r\n            disabled={activeStep === 0}\r\n          >\r\n            <KeyboardArrowLeft />\r\n          </LoginPatientButton>\r\n        }\r\n      />\r\n      <Button\r\n        size=\"small\"\r\n        onClick={() => {\r\n          setHasOnboardedToTrue();\r\n        }}\r\n      >\r\n        Pular etapa\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/onboard-step-1.21fc026a.svg\";","export default __webpack_public_path__ + \"static/media/onboard-step-2.813ac00c.svg\";","export default __webpack_public_path__ + \"static/media/onboard-step-3.e02cc440.svg\";","import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { ArrowBack } from '@material-ui/icons';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\nimport { grey } from '@material-ui/core/colors';\r\n\r\nimport { PatientFormProps, PatientPanel } from '../../interfaces';\r\nimport { baseUrl } from '../../utils/loggedUser';\r\nimport { UserAuth } from '../../models/UserAuth';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    greenColor: {\r\n      color: '#329D9C',\r\n    },\r\n    EPCAppBar: {\r\n      backgroundColor: '#329D63',\r\n      color: 'white',\r\n    },\r\n    EPCTitle: {\r\n      color: '#329D63',\r\n      margin: theme.spacing(5, 2, 2),\r\n    },\r\n    EPCBodyContent: {\r\n      '& > *': {\r\n        textAlign: 'left',\r\n        margin: theme.spacing(2),\r\n      },\r\n    },\r\n    EPCSlider: {\r\n      textAlign: 'center',\r\n      color: '#329D63',\r\n      width: '90%',\r\n      marginLeft: '1rem',\r\n    },\r\n    EPCForm: {\r\n      margin: theme.spacing(2),\r\n      textAlign: 'left',\r\n    },\r\n    EPCFormItem: {\r\n      margin: theme.spacing(3, 0, 6),\r\n    },\r\n    sliderSubLabel: {\r\n      whiteSpace: 'break-spaces',\r\n      width: '50px',\r\n      fontSize: '0.75rem',\r\n      lineHeight: 1,\r\n    },\r\n    EPCFooter: {\r\n      textAlign: 'center',\r\n      '& button': {\r\n        display: 'block',\r\n        margin: '1rem auto',\r\n      },\r\n    },\r\n    EPCReferenceInfo: {\r\n      fontSize: '0.75rem',\r\n      color: grey[500],\r\n    },\r\n  })\r\n);\r\n\r\nconst questions = [\r\n  'Não posso mais suportar esta dor.',\r\n  'Não importa o que fizer minhas dores não mudarão.',\r\n  'Preciso tomar remédios para dor.',\r\n  'Isso nunca vai acabar.',\r\n  'Sou um caso sem esperança.',\r\n  'Quando ficarei pior novamente?',\r\n  'Essa dor esta me matando.',\r\n  'Eu não consigo mais continuar.',\r\n  'Essa dor esta me deixando maluco.',\r\n];\r\n\r\nasync function postEPCAnswers(\r\n  auth: UserAuth,\r\n  answers: number[],\r\n  goToQuestionaire: () => void\r\n) {\r\n  const response = await fetch(`${baseUrl}/api/v1/forms/patient/fill/epc`, {\r\n    method: 'POST',\r\n    headers: {\r\n      Authorization: `Bearer ${auth.token}`,\r\n      Accept: 'application/json',\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({ answers }),\r\n  });\r\n\r\n  if (response.ok) {\r\n    goToQuestionaire();\r\n  }\r\n}\r\n\r\nexport default function EPC(props: PatientFormProps) {\r\n  enum EPCFormPanel {\r\n    DESCRIPTION,\r\n    FORM,\r\n  }\r\n  const classes = useStyles();\r\n  const [currentEPCPanel, setCurrentEPCPanel] = React.useState(\r\n    EPCFormPanel.DESCRIPTION\r\n  );\r\n  const [answers, setAnswers] = React.useState([0, 0, 0, 0, 0, 0, 0, 0, 0]);\r\n\r\n  const marks = [\r\n    {\r\n      value: 0,\r\n      label: (\r\n        <>\r\n          <Typography>0</Typography>\r\n          <Typography className={classes.sliderSubLabel}>\r\n            Quase nunca\r\n          </Typography>\r\n        </>\r\n      ),\r\n    },\r\n    { value: 1, label: 1 },\r\n    { value: 2, label: 2 },\r\n    { value: 3, label: 3 },\r\n    { value: 4, label: 4 },\r\n    {\r\n      value: 5,\r\n      label: (\r\n        <>\r\n          <Typography>5</Typography>\r\n          <Typography className={classes.sliderSubLabel}>\r\n            Quase sempre\r\n          </Typography>\r\n        </>\r\n      ),\r\n    },\r\n  ];\r\n  return (\r\n    <>\r\n      <AppBar position=\"static\" classes={{ colorPrimary: classes.EPCAppBar }}>\r\n        <Toolbar>\r\n          <IconButton\r\n            edge=\"start\"\r\n            color=\"inherit\"\r\n            aria-label=\"menu\"\r\n            onClick={() => props.setCurrentPanel(PatientPanel.INITIAL)}\r\n          >\r\n            <ArrowBack />\r\n          </IconButton>\r\n          <Typography variant=\"subtitle1\">\r\n            Escala de pensamento Catastrófico\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      {currentEPCPanel === EPCFormPanel.DESCRIPTION && (\r\n        <>\r\n          <div className={classes.EPCTitle}>\r\n            <Typography variant=\"h6\">Questionário</Typography>\r\n            <Typography variant=\"h6\">\r\n              Escala de pensamento Catastrófico\r\n            </Typography>\r\n          </div>\r\n          <div className={classes.EPCBodyContent}>\r\n            <Typography variant=\"body1\">\r\n              Na maior parte do tempo, nós dizemos coisas. Por exemplo: nos\r\n              encorajamos a fazer coisas, nos culpamos quando cometemos um erro\r\n              ou nos recompensamos por algo que fizemos com sucesso.\r\n            </Typography>\r\n            <Typography variant=\"body1\">\r\n              {' '}\r\n              Quando estamos com dor, frequentemente também nos dizemos coisas\r\n              que são diferentes das coisas que nós dizemos quando estamos nos\r\n              sentindo bem.\r\n            </Typography>\r\n            <Typography variant=\"body1\">\r\n              A seguir existe uma lista de pensamentos típicos de pessoas que\r\n              estão com dor.\r\n            </Typography>\r\n            <Button\r\n              variant=\"contained\"\r\n              className={classes.EPCAppBar}\r\n              onClick={() => setCurrentEPCPanel(EPCFormPanel.FORM)}\r\n            >\r\n              Começar\r\n            </Button>\r\n            <Typography variant=\"body2\" className={classes.EPCReferenceInfo}>\r\n              Junior JS, Nicholas MK, Pereira IA, Pimenta CAM, Asghari A, Cruz\r\n              RM. Validação da Escala de Pensamentos Catastróficos sobre Dor.\r\n              ACTA FISIATR 2008; 15(1): 31 - 36\r\n            </Typography>\r\n          </div>\r\n        </>\r\n      )}\r\n      {currentEPCPanel === EPCFormPanel.FORM && (\r\n        <div className={classes.EPCForm}>\r\n          <Typography variant=\"subtitle1\">\r\n            Marque na escala com que frequência você tem estes pensamentos\r\n            quando sua dor esta forte.\r\n          </Typography>\r\n\r\n          {questions.map((question, index) => (\r\n            <div className={classes.EPCFormItem} key={`question_${index}`}>\r\n              <Typography id={`question_${index}`} gutterBottom>\r\n                {question}\r\n              </Typography>\r\n              <Slider\r\n                aria-labelledby={`question_${index}`}\r\n                defaultValue={0}\r\n                className={classes.EPCSlider}\r\n                step={1}\r\n                valueLabelDisplay=\"auto\"\r\n                marks={marks}\r\n                min={0}\r\n                max={5}\r\n                onChange={(e, v) => {\r\n                  const newAnswers = [...answers];\r\n                  newAnswers[index] = v as number;\r\n                  setAnswers(newAnswers);\r\n                }}\r\n              />\r\n            </div>\r\n          ))}\r\n\r\n          <div className={classes.EPCFooter}>\r\n            <Button\r\n              variant=\"contained\"\r\n              className={classes.EPCAppBar}\r\n              onClick={() =>\r\n                postEPCAnswers(props.patientAuth, answers, () =>\r\n                  props.setCurrentPanel(PatientPanel.INITIAL)\r\n                )\r\n              }\r\n            >\r\n              Finalizar\r\n            </Button>\r\n            <Button\r\n              variant=\"text\"\r\n              className={classes.greenColor}\r\n              onClick={() => setCurrentEPCPanel(EPCFormPanel.DESCRIPTION)}\r\n            >\r\n              Anterior\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import { useEffect, useReducer, useState } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Accordion from '@material-ui/core/Accordion';\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\r\n\r\nimport logoWhite from '../../image/logo-white.svg';\r\nimport {\r\n  PatientPanel,\r\n  QuestionaireListProps,\r\n  QUESTIONAIRE_LIST,\r\n} from '../../interfaces';\r\nimport { LoggedPatient } from '../../models/UserAuth';\r\nimport questionaireReducer from '../../reducers/questionaire';\r\nimport { getQuestionairesForPatient } from '../../actions/questionaire';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { ArrowBack } from '@material-ui/icons';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    logoWhite: {\r\n      textAlign: 'center',\r\n      margin: '1rem',\r\n    },\r\n    profileMenu: {\r\n      backgroundColor: '#CEEBEA',\r\n      textAlign: 'left',\r\n      '&:last-child, &:first-child': {\r\n        borderRadius: '0 0 20px 20px',\r\n      },\r\n      boxShadow: 'none',\r\n    },\r\n    profileButton: {\r\n      backgroundColor: '#329D9C',\r\n      color: 'white',\r\n      margin: '1rem 0',\r\n    },\r\n    expandIcon: {\r\n      position: 'absolute',\r\n      left: 0,\r\n      top: '30px',\r\n      '&.Mui-expanded': {\r\n        top: '42px',\r\n      },\r\n    },\r\n    expandIconProfile: {\r\n      position: 'absolute',\r\n      top: '30px',\r\n    },\r\n    greenColor: {\r\n      color: '#329D9C',\r\n    },\r\n    questionaireList: {\r\n      '& > *': {\r\n        margin: theme.spacing(1, 2, 1),\r\n      },\r\n      '& button': {\r\n        backgroundColor: 'white',\r\n        width: '90%',\r\n      },\r\n    },\r\n    textField: {\r\n      margin: '1rem 0',\r\n      '& .MuiFormLabel-root': {\r\n        color: '#329D9C',\r\n      },\r\n      '& .MuiInputBase-input': {\r\n        color: 'rgba(0, 0, 0, 0.87)',\r\n      },\r\n      '& .MuiInput-underline:before': {\r\n        content: 'none',\r\n      },\r\n    },\r\n  })\r\n);\r\n\r\ninterface BannerInfoProps {\r\n  patientInfo: LoggedPatient;\r\n}\r\n\r\nenum BannerPanelType {\r\n  Description,\r\n  Profile,\r\n}\r\n\r\nfunction BannerMenu(props: BannerInfoProps) {\r\n  const classes = useStyles();\r\n  const [panel, setPanel] = useState(BannerPanelType.Description);\r\n\r\n  return panel === BannerPanelType.Description ? (\r\n    <Accordion\r\n      classes={{\r\n        root: classes.profileMenu,\r\n      }}\r\n      defaultExpanded\r\n    >\r\n      <AccordionSummary\r\n        expandIcon={<MenuIcon />}\r\n        aria-controls=\"panel1a-content\"\r\n        id=\"panel1a-header\"\r\n        classes={{\r\n          expandIcon: classes.expandIcon,\r\n        }}\r\n      >\r\n        <Grid container>\r\n          <Grid item className={classes.logoWhite} xs={12}>\r\n            <img\r\n              src={logoWhite}\r\n              alt=\"Logo da Ador em branco\"\r\n              className={classes.logoWhite}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <Typography\r\n              variant=\"h4\"\r\n              component=\"h1\"\r\n              className={classes.greenColor}\r\n            >\r\n              Olá, {props.patientInfo.name}!\r\n            </Typography>\r\n          </Grid>\r\n        </Grid>\r\n      </AccordionSummary>\r\n      <AccordionDetails>\r\n        <Grid container>\r\n          <Grid item xs={12}>\r\n            <Typography variant=\"body1\">\r\n              Abaixo estão os questionários que foram Solicitados para que você\r\n              responda. Com os resultados destes questionários, o profissional\r\n              Irá conhecer e analisar sua dor e assim, planejar seu tratamento.\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <Button\r\n              variant=\"contained\"\r\n              className={classes.profileButton}\r\n              onClick={() => setPanel(BannerPanelType.Profile)}\r\n              size=\"small\"\r\n            >\r\n              Ver meu perfil\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      </AccordionDetails>\r\n    </Accordion>\r\n  ) : (\r\n    <Paper className={classes.profileMenu}>\r\n      <AppBar\r\n        position=\"static\"\r\n        classes={{ colorPrimary: classes.profileMenu }}\r\n        style={{ paddingTop: 20 }}\r\n      >\r\n        <Toolbar>\r\n          <IconButton\r\n            edge=\"start\"\r\n            color=\"inherit\"\r\n            aria-label=\"menu\"\r\n            className={classes.expandIconProfile}\r\n            onClick={() => setPanel(BannerPanelType.Description)}\r\n          >\r\n            <ArrowBack />\r\n          </IconButton>\r\n          <Grid container>\r\n            <Grid item className={classes.logoWhite} xs={12}>\r\n              <img\r\n                src={logoWhite}\r\n                alt=\"Logo da Ador em branco\"\r\n                className={classes.logoWhite}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <Typography\r\n                variant=\"h4\"\r\n                component=\"h1\"\r\n                className={classes.greenColor}\r\n              >\r\n                Olá, {props.patientInfo.name}!\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <TextField\r\n                disabled\r\n                id=\"standard-disabled\"\r\n                label=\"CPF\"\r\n                defaultValue={props.patientInfo.tax_id}\r\n                className={classes.textField}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <TextField\r\n                disabled\r\n                id=\"standard-disabled\"\r\n                label=\"E-mail\"\r\n                defaultValue={props.patientInfo.email}\r\n                className={classes.textField}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <TextField\r\n                disabled\r\n                id=\"standard-disabled\"\r\n                label=\"Data de Nascimento\"\r\n                defaultValue={props.patientInfo.birthdate}\r\n                className={classes.textField}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </Paper>\r\n  );\r\n}\r\n\r\nexport default function QuestionaireList(props: QuestionaireListProps) {\r\n  const classes = useStyles();\r\n\r\n  const [questionaires, questionairesDispatch] = useReducer(\r\n    questionaireReducer,\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    getQuestionairesForPatient()(questionairesDispatch);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <BannerMenu patientInfo={props.patientInfo} />\r\n      <div className={classes.questionaireList}>\r\n        <Typography variant=\"subtitle1\">Questionários:</Typography>\r\n        {QUESTIONAIRE_LIST.filter((item) =>\r\n          questionaires.includes(item.value)\r\n        ).map((item) => (\r\n          <Button\r\n            variant=\"contained\"\r\n            onClick={() => {\r\n              if (item.value in PatientPanel) {\r\n                props.setCurrentPanel(\r\n                  PatientPanel[item.value as keyof typeof PatientPanel]\r\n                );\r\n              }\r\n            }}\r\n          >\r\n            {item.label}\r\n          </Button>\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/logo-white.b205485d.svg\";","import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { ArrowBack } from '@material-ui/icons';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\nimport { grey } from '@material-ui/core/colors';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport { Grid, LinearProgress } from '@material-ui/core';\r\n\r\nimport { PatientFormProps, PatientPanel } from '../../interfaces';\r\nimport { baseUrl } from '../../utils/loggedUser';\r\nimport { UserAuth } from '../../models/UserAuth';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    mainColor: {\r\n      color: '#205072',\r\n    },\r\n    appBar: {\r\n      backgroundColor: '#205072',\r\n      color: 'white',\r\n    },\r\n    title: {\r\n      color: '#205072',\r\n      margin: theme.spacing(5, 2, 2),\r\n    },\r\n    bodyContent: {\r\n      '& > *': {\r\n        textAlign: 'left',\r\n        margin: theme.spacing(6, 3),\r\n      },\r\n    },\r\n    form: {\r\n      margin: theme.spacing(2),\r\n      textAlign: 'left',\r\n    },\r\n    formItem: {\r\n      margin: theme.spacing(3, 0, 6),\r\n    },\r\n    footer: {\r\n      textAlign: 'center',\r\n      '& button': {\r\n        display: 'block',\r\n        margin: '1rem auto',\r\n      },\r\n    },\r\n    referenceInfo: {\r\n      fontSize: '0.75rem',\r\n      color: grey[500],\r\n    },\r\n    progressBarRoot: {\r\n      margin: '15px 0',\r\n    },\r\n    progressBarLine: {\r\n      backgroundColor: '#205072',\r\n    },\r\n  })\r\n);\r\n\r\nconst questions = [\r\n  {\r\n    title: 'A sua dor tem uma ou mais das seguintes características:',\r\n    sections: ['Queimação', 'Sensação de frio dolorosa', 'Choque elétrico'],\r\n  },\r\n  {\r\n    title:\r\n      'Há presença de um ou mais dos seguintes sintomas na mesma área da sua dor:',\r\n    sections: [\r\n      'Formigamento',\r\n      'Alfinetada e agulhada',\r\n      'Adormecimento',\r\n      'Coceira',\r\n    ],\r\n  },\r\n  {\r\n    title:\r\n      'A dor está localizada em uma área onde o exame físico pode revelar uma ou mais das seguintes características:',\r\n    subtitle: '(Pergunta para profissional de saúde responder)',\r\n    sections: [\r\n      'Hipoestesia (diminuição da sensibilidade) ao toque',\r\n      'Hipoestesia (diminuição da sensibilidade) à picada de agulha',\r\n    ],\r\n  },\r\n  {\r\n    title: 'Na área dolorosa, a dor pode ser causada ou aumentada por:',\r\n    subtitle: '(Pergunta para profissional de saúde responder)',\r\n    sections: ['Escovação'],\r\n  },\r\n];\r\n\r\nasync function postDN4Answers(\r\n  auth: UserAuth,\r\n  answers: number[],\r\n  goToQuestionaire: () => void\r\n) {\r\n  const response = await fetch(`${baseUrl}/api/v1/forms/patient/fill/dn4`, {\r\n    method: 'POST',\r\n    headers: {\r\n      Authorization: `Bearer ${auth.token}`,\r\n      Accept: 'application/json',\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({ answers }),\r\n  });\r\n\r\n  if (response.ok) {\r\n    goToQuestionaire();\r\n  }\r\n}\r\n\r\nconst getRealIndex = (questionIndex: number, sectionIndex: number) => {\r\n  return questions.reduce((acc, q, i) => {\r\n    if (i < questionIndex) {\r\n      return acc + q.sections.length;\r\n    } else if (i === questionIndex) {\r\n      return acc + sectionIndex;\r\n    }\r\n    return acc;\r\n  }, 0);\r\n};\r\n\r\nexport default function DN4(props: PatientFormProps) {\r\n  const classes = useStyles();\r\n  const [currentPanel, setCurrentPanel] = React.useState(0);\r\n  const [answers, setAnswers] = React.useState(new Array(10));\r\n\r\n  const handleChange = (\r\n    event: React.ChangeEvent<HTMLInputElement>,\r\n    value: string,\r\n    questionIndex: number,\r\n    sectionIndex: number\r\n  ): void => {\r\n    const newAnswers = [...answers];\r\n    const questionRealIndex = getRealIndex(questionIndex, sectionIndex);\r\n    newAnswers[questionRealIndex] = Number(value);\r\n    setAnswers(newAnswers);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AppBar position=\"static\" classes={{ colorPrimary: classes.appBar }}>\r\n        <Toolbar>\r\n          <IconButton\r\n            edge=\"start\"\r\n            color=\"inherit\"\r\n            aria-label=\"menu\"\r\n            onClick={() => props.setCurrentPanel(PatientPanel.INITIAL)}\r\n          >\r\n            <ArrowBack />\r\n          </IconButton>\r\n          <Typography variant=\"subtitle1\">\r\n            Questionário Dor Neuropática (DN4)\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      {currentPanel === 0 && (\r\n        <>\r\n          <div className={classes.title}>\r\n            <Typography variant=\"h6\">Questionário</Typography>\r\n            <Typography variant=\"h6\">\r\n              Questionário Dor Neuropática (DN4)\r\n            </Typography>\r\n          </div>\r\n          <div className={classes.bodyContent}>\r\n            <Typography variant=\"body1\">\r\n              O questionário DN4 avalia a possibilidade da sua dor ser de origem\r\n              dos nervos especificamente, sendo necessário tratamento\r\n              especifico.\r\n            </Typography>\r\n            <Button\r\n              variant=\"contained\"\r\n              className={classes.appBar}\r\n              onClick={() => setCurrentPanel(1)}\r\n            >\r\n              Começar\r\n            </Button>\r\n            <Typography variant=\"body2\" className={classes.referenceInfo}>\r\n              Versão portuguesa do Neuropathic Pain Questionnaire (DN4) do\r\n              French Neuropathic Pain Group. Tradução, adaptação cultural e\r\n              validação da responsabilidade da Faculdade De Medicina da\r\n              Universidade do Porto, com a autorização do autor Didier\r\n              Bouhassira, PhD.\r\n            </Typography>\r\n          </div>\r\n        </>\r\n      )}\r\n      {currentPanel > 0 && (\r\n        <div className={classes.form}>\r\n          <LinearProgress\r\n            variant=\"determinate\"\r\n            value={(currentPanel / questions.length) * 100}\r\n            classes={{\r\n              root: classes.progressBarRoot,\r\n              bar: classes.progressBarLine,\r\n            }}\r\n          />\r\n          {questions.map(\r\n            (question, qIndex) =>\r\n              currentPanel - 1 === qIndex && (\r\n                <div key={`question${qIndex}`}>\r\n                  <Grid container spacing={1}>\r\n                    <Grid item xs={12}>\r\n                      <Typography variant=\"subtitle1\">\r\n                        {question.title}\r\n                      </Typography>\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                      <Typography\r\n                        variant=\"body2\"\r\n                        className={classes.referenceInfo}\r\n                      >\r\n                        {question.subtitle}\r\n                      </Typography>\r\n                    </Grid>\r\n                    {question.sections.map((section, sIndex) => (\r\n                      <Grid\r\n                        item\r\n                        xs={12}\r\n                        key={`question${qIndex}-section${sIndex}`}\r\n                      >\r\n                        <FormControl component=\"fieldset\">\r\n                          <FormLabel component=\"legend\">{section}</FormLabel>\r\n                          <RadioGroup\r\n                            row\r\n                            aria-label={section}\r\n                            name={`question${qIndex}-section${sIndex}`}\r\n                            onChange={(e, v) =>\r\n                              handleChange(e, v, qIndex, sIndex)\r\n                            }\r\n                          >\r\n                            <FormControlLabel\r\n                              value=\"1\"\r\n                              control={<Radio />}\r\n                              label=\"Sim\"\r\n                              checked={\r\n                                answers[getRealIndex(qIndex, sIndex)] === 1\r\n                              }\r\n                            />\r\n                            <FormControlLabel\r\n                              value=\"0\"\r\n                              control={<Radio />}\r\n                              label=\"Não\"\r\n                              checked={\r\n                                answers[getRealIndex(qIndex, sIndex)] === 0\r\n                              }\r\n                            />\r\n                          </RadioGroup>\r\n                        </FormControl>\r\n                      </Grid>\r\n                    ))}\r\n                  </Grid>\r\n                </div>\r\n              )\r\n          )}\r\n\r\n          <div className={classes.footer}>\r\n            <Button\r\n              variant=\"contained\"\r\n              className={classes.appBar}\r\n              onClick={() =>\r\n                currentPanel === questions.length\r\n                  ? postDN4Answers(props.patientAuth, answers, () =>\r\n                      props.setCurrentPanel(PatientPanel.INITIAL)\r\n                    )\r\n                  : setCurrentPanel(currentPanel + 1)\r\n              }\r\n              disabled={questions[currentPanel - 1].sections.some(\r\n                (s, sIndex) =>\r\n                  answers[getRealIndex(currentPanel - 1, sIndex)] === undefined\r\n              )}\r\n            >\r\n              {currentPanel === questions.length ? 'Finalizar' : 'Próximo'}\r\n            </Button>\r\n            <Button\r\n              variant=\"text\"\r\n              className={classes.mainColor}\r\n              onClick={() => setCurrentPanel(currentPanel - 1)}\r\n            >\r\n              Anterior\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { ArrowBack } from '@material-ui/icons';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\nimport { grey } from '@material-ui/core/colors';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport { Grid, LinearProgress } from '@material-ui/core';\r\n\r\nimport { PatientFormProps, PatientPanel } from '../../interfaces';\r\nimport { baseUrl } from '../../utils/loggedUser';\r\nimport { UserAuth } from '../../models/UserAuth';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    mainColor: {\r\n      color: '#7A3FE1',\r\n    },\r\n    appBar: {\r\n      backgroundColor: '#7A3FE1',\r\n      color: 'white',\r\n    },\r\n    title: {\r\n      color: '#7A3FE1',\r\n      margin: theme.spacing(5, 2, 2),\r\n    },\r\n    bodyContent: {\r\n      '& > *': {\r\n        textAlign: 'left',\r\n        margin: theme.spacing(6, 3),\r\n      },\r\n    },\r\n    form: {\r\n      margin: theme.spacing(2),\r\n      textAlign: 'left',\r\n    },\r\n    formItem: {\r\n      margin: theme.spacing(3, 0, 6),\r\n    },\r\n    formLabel: { fontSize: '0.875rem', margin: '5px 0' },\r\n    footer: {\r\n      textAlign: 'center',\r\n      '& button': {\r\n        display: 'block',\r\n        margin: '1rem auto',\r\n      },\r\n    },\r\n    referenceInfo: {\r\n      fontSize: '0.75rem',\r\n      color: grey[500],\r\n    },\r\n    progressBarRoot: {\r\n      margin: '15px 0',\r\n    },\r\n    progressBarLine: {\r\n      backgroundColor: '#7A3FE1',\r\n    },\r\n  })\r\n);\r\n\r\nconst questions = [\r\n  {\r\n    title: 'Seção 1 - Intensidade da dor',\r\n    alternatives: [\r\n      'Posso tolerar a dor que estou sentindo sem ter que  tomar analgésicos',\r\n      'A dor é forte, mas suporto-a sem tomar analgésicos',\r\n      'Os analgésicos aliviam completamente a dor',\r\n      'Os analgésicos aliviam moderadamente a dor',\r\n      'Os analgésicos aliviam muito pouco a dor',\r\n      'Os analgésicos não afetam de forma alguma a dor e não os estou tomando',\r\n    ],\r\n  },\r\n  {\r\n    title: 'Seção 2 - Cuidados pessoais (lavar-se, vestir-se, etc)',\r\n    alternatives: [\r\n      'Posso me cuidar normalmente sem que isso cause mais dor',\r\n      'Posso me cuidar normalmente, mas isso causa mais dor',\r\n      'Dói para eu me cuidar e eu sou lento e cuidadoso',\r\n      'Preciso de alguma ajuda, mas consigo realizar a maioria dos meus cuidados pessoais',\r\n      'Preciso de ajuda todos os dias para a maioria dos meus cuidados pessoais',\r\n      'Não consigo me vestir, me lavo com dificuldades e fico na cama',\r\n    ],\r\n  },\r\n  {\r\n    title: 'Seção 3 - Levantar pesos',\r\n    alternatives: [\r\n      'Posso levantar pesos consideráveis sem sentir mais dor',\r\n      'Posso levantar pesos consideráveis, mas isso causa mais dor',\r\n      'A dor me impede de levantar coisas pesadas, mas posso levantá-las se bem posicionadas. Ex: Em cima de uma mesa',\r\n      'A dor me impede de levantar pesos consideráveis, mas posso levantar pesos leves a médios, se estiverem posicionados convenientemente',\r\n      'Posso levantar somente pesos bem leves',\r\n      'Não posso levantar ou carregar nada',\r\n    ],\r\n  },\r\n  {\r\n    title: 'Seção 4 - Caminhar',\r\n    alternatives: [\r\n      'A dor não me impede de andar qualquer distância',\r\n      'A dor me impede de andar mais de 1,6 quilômetros',\r\n      'A dor me impede de andar mais de 800 metros',\r\n      'A dor me impede de andar mais de 400 metros',\r\n      'Posso andar somente com uma bengala ou muletas',\r\n      'Fico na cama a maior parte do tempo e tenho que me arrastar para ir ao banheiro',\r\n    ],\r\n  },\r\n  {\r\n    title: 'Seção 5 - Sentar',\r\n    alternatives: [\r\n      'Posso me sentar em qualquer cadeira, por quanto tempo quiser',\r\n      'Só posso me sentar na minha cadeira favorita, por quanto tempo quiser',\r\n      'A dor me impede de sentar por mais de 1 hora',\r\n      'A dor me impede de sentar por mais de meia hora',\r\n      'A dor me impede de sentar por mais de 10 minutos',\r\n      'A dor me impede completamente de sentar',\r\n    ],\r\n  },\r\n  {\r\n    title: 'Seção 6 - Ficar em pé',\r\n    alternatives: [\r\n      'Posso ficar em pé o quanto tempo quiser, sem sentir mais dor',\r\n      'Posso ficar em pé o quanto tempo quiser, mas isso me causa mais dor',\r\n      'A dor me impede de ficar em pé por mais de 1 hora',\r\n      'A dor me impede de ficar em pé por mais de 30 minutos',\r\n      'A dor me impede de ficar em pé por mais de 10 minutos',\r\n      'A dor me impede completamente de ficar em pé',\r\n    ],\r\n  },\r\n  {\r\n    title: 'Seção 7 - Dormir',\r\n    alternatives: [\r\n      'A dor não me impede de dormir bem',\r\n      'Só posso dormir bem tomando comprimidos',\r\n      'Mesmo quando tomo os comprimidos, só consigo dormir menos de seis horas',\r\n      'Mesmo quando tomo os comprimidos, só consigo dormir menos de quatro horas',\r\n      'Mesmo quando tomo os comprimidos, só consigo dormir menos de duas horas',\r\n      'A dor me impede completamente de dormir',\r\n    ],\r\n  },\r\n  {\r\n    title: 'Seção 8 - Vida sexual',\r\n    alternatives: [\r\n      'Minha vida sexual é normal e não causa mais dor',\r\n      'Minha vida sexual é normal, mas causa alguma dor adicional',\r\n      'Minha vida sexual é quase normal, mas com muita dor',\r\n      'Minha vida sexual é severamente restrita pela dor',\r\n      'Minha vida sexual é quase inexistente devido à dor',\r\n      'A dor me impede completamente de ter vida sexual',\r\n    ],\r\n  },\r\n  {\r\n    title: 'Seção 9 - Vida social',\r\n    alternatives: [\r\n      'Minha vida social é normal e não me causa mais dor',\r\n      'Minha vida social é normal, mas aumenta o grau de dor',\r\n      'A dor não tem efeito significativo na minha vida social, com exceção de limitar meus interesses energéticos, como por exemplo, dançar, etc.',\r\n      'A dor restringiu minha vida social e não saio tanto como antes',\r\n      'A dor restringiu minha vida social à minha casa',\r\n      'Não tenho vida social por causa da dor',\r\n    ],\r\n  },\r\n  {\r\n    title: 'Seção 10 - Viajar',\r\n    alternatives: [\r\n      'Posso viajar para qualquer lugar sem me causar mais dor',\r\n      'Posso viajar para qualquer lugar, mas isso causa mais dor',\r\n      'A dor é forte, mas consigo fazer jornadas de mais de duas horas',\r\n      'A dor me restringe a jornadas de menos de 1 hora',\r\n      'A dor me restringe a jornadas curtas necessárias, de menos de 30 minutos',\r\n      'A dor me impede de viajar, exceto ir ao médico ou ao hospital',\r\n    ],\r\n  },\r\n];\r\n\r\nasync function postOSWAnswers(\r\n  auth: UserAuth,\r\n  answers: number[],\r\n  goToQuestionaire: () => void\r\n) {\r\n  const response = await fetch(\r\n    `${baseUrl}/api/v1/forms/patient/fill/OSWESTRY`,\r\n    {\r\n      method: 'POST',\r\n      headers: {\r\n        Authorization: `Bearer ${auth.token}`,\r\n        Accept: 'application/json',\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ answers }),\r\n    }\r\n  );\r\n\r\n  if (response.ok) {\r\n    goToQuestionaire();\r\n  }\r\n}\r\n\r\nexport default function OSWESTRY(props: PatientFormProps) {\r\n  const classes = useStyles();\r\n  const [currentPanel, setCurrentPanel] = React.useState(0);\r\n  const [answers, setAnswers] = React.useState(new Array(10));\r\n\r\n  const handleChange = (\r\n    event: React.ChangeEvent<HTMLInputElement>,\r\n    value: string,\r\n    questionIndex: number\r\n  ): void => {\r\n    const newAnswers = [...answers];\r\n    newAnswers[questionIndex] = Number(value);\r\n    setAnswers(newAnswers);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AppBar position=\"static\" classes={{ colorPrimary: classes.appBar }}>\r\n        <Toolbar>\r\n          <IconButton\r\n            edge=\"start\"\r\n            color=\"inherit\"\r\n            aria-label=\"menu\"\r\n            onClick={() => props.setCurrentPanel(PatientPanel.INITIAL)}\r\n          >\r\n            <ArrowBack />\r\n          </IconButton>\r\n          <Typography variant=\"subtitle1\">\r\n            Questionário Oswestry de Lombalgia\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      {currentPanel === 0 && (\r\n        <>\r\n          <div className={classes.title}>\r\n            <Typography variant=\"h6\">Questionário</Typography>\r\n            <Typography variant=\"h6\">Oswestry de Lombalgia</Typography>\r\n          </div>\r\n          <div className={classes.bodyContent}>\r\n            <Typography variant=\"body1\">\r\n              Esse questionário avalia o impacto da dor nas costas em suas\r\n              atividades diárias.\r\n            </Typography>\r\n            <Button\r\n              variant=\"contained\"\r\n              className={classes.appBar}\r\n              onClick={() => setCurrentPanel(1)}\r\n            >\r\n              Começar\r\n            </Button>\r\n            <Typography variant=\"body2\" className={classes.referenceInfo}>\r\n              Vigatto R, Alexandre NMC, Correa HR Filho. Development of a\r\n              Brazilian Portuguese Version of the Oswestry DisabilitY. Index:\r\n              Cross-Cultural Adaptation, Reability and Validity. Spine.\r\n              2007;32(4):481-6.\r\n            </Typography>\r\n          </div>\r\n        </>\r\n      )}\r\n      {currentPanel > 0 && (\r\n        <div className={classes.form}>\r\n          <LinearProgress\r\n            variant=\"determinate\"\r\n            value={(currentPanel / questions.length) * 100}\r\n            classes={{\r\n              root: classes.progressBarRoot,\r\n              bar: classes.progressBarLine,\r\n            }}\r\n          />\r\n          {currentPanel === 1 && (\r\n            <div>\r\n              <Grid container spacing={1}>\r\n                <Grid item xs={12}>\r\n                  <Typography variant=\"body1\">\r\n                    Selecione em cada seção, somente uma alternativa, a que se\r\n                    aplica ao seu caso.\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item xs={12}>\r\n                  <Typography variant=\"body2\" className={classes.referenceInfo}>\r\n                    (Nós entendemos que talvez você ache que duas das afirmações\r\n                    de uma seção podem estar relacionadas com seu caso, mas\r\n                    marque apenas a alternativa que melhor descreve o seu\r\n                    problema.)\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </div>\r\n          )}\r\n          {questions.map(\r\n            (question, qIndex) =>\r\n              currentPanel - 1 === qIndex && (\r\n                <div key={`question${qIndex}`}>\r\n                  <Grid container spacing={1}>\r\n                    <Grid item xs={12}>\r\n                      <Typography variant=\"body1\">{question.title}</Typography>\r\n                    </Grid>\r\n                    <FormControl component=\"fieldset\">\r\n                      <RadioGroup\r\n                        onChange={(e, v) => handleChange(e, v, qIndex)}\r\n                        aria-label={question.title}\r\n                        name={`question${qIndex}`}\r\n                      >\r\n                        {question.alternatives.map((alternative, aIndex) => (\r\n                          <FormControlLabel\r\n                            value={aIndex}\r\n                            control={<Radio />}\r\n                            label={alternative}\r\n                            checked={answers[qIndex] === aIndex}\r\n                            classes={{ label: classes.formLabel }}\r\n                          />\r\n                        ))}\r\n                      </RadioGroup>\r\n                    </FormControl>\r\n                  </Grid>\r\n                </div>\r\n              )\r\n          )}\r\n\r\n          <div className={classes.footer}>\r\n            <Button\r\n              variant=\"contained\"\r\n              className={classes.appBar}\r\n              onClick={() =>\r\n                currentPanel === questions.length\r\n                  ? postOSWAnswers(props.patientAuth, answers, () =>\r\n                      props.setCurrentPanel(PatientPanel.INITIAL)\r\n                    )\r\n                  : setCurrentPanel(currentPanel + 1)\r\n              }\r\n              disabled={answers[currentPanel - 1] === undefined}\r\n            >\r\n              {currentPanel === questions.length ? 'Finalizar' : 'Próximo'}\r\n            </Button>\r\n            <Button\r\n              variant=\"text\"\r\n              className={classes.mainColor}\r\n              onClick={() => setCurrentPanel(currentPanel - 1)}\r\n            >\r\n              Anterior\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\nimport React from 'react';\r\n\r\nimport { PatientPanel } from '../../interfaces';\r\nimport OnBoard from './OnBoard';\r\nimport EPC from './EPC';\r\nimport QuestionaireList from './QuestionaireList';\r\nimport useAuth from '../../hooks/useAuth';\r\nimport DN4 from './DN4';\r\nimport OSWESTRY from './OSWESTRY';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      width: '100%',\r\n      height: '100vh',\r\n    },\r\n  })\r\n);\r\n\r\nfunction getHasOnboardedLocalStorage(): boolean {\r\n  const hasGoneOnboard = localStorage.getItem('onboard') || 'false';\r\n  return JSON.parse(hasGoneOnboard);\r\n}\r\n\r\nfunction setHasOnboardedLocalStorage(isOnboard: boolean): void {\r\n  localStorage.setItem('onboard', JSON.stringify(isOnboard));\r\n}\r\n\r\nexport default function PatientPage() {\r\n  const classes = useStyles();\r\n  const [hasOnboarded, setHasOnboarded] = React.useState(\r\n    getHasOnboardedLocalStorage()\r\n  );\r\n\r\n  const [currentPanel, setCurrentPanel] = React.useState(PatientPanel.INITIAL);\r\n  const [auth] = useAuth();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      {hasOnboarded ? (\r\n        <>\r\n          {currentPanel === PatientPanel.INITIAL && (\r\n            <QuestionaireList\r\n              setCurrentPanel={setCurrentPanel}\r\n              patientInfo={auth.patient!}\r\n            />\r\n          )}\r\n          {currentPanel === PatientPanel.EPC && (\r\n            <EPC setCurrentPanel={setCurrentPanel} patientAuth={auth} />\r\n          )}\r\n          {currentPanel === PatientPanel.DN4 && (\r\n            <DN4 setCurrentPanel={setCurrentPanel} patientAuth={auth} />\r\n          )}\r\n          {currentPanel === PatientPanel.OSWESTRY && (\r\n            <OSWESTRY setCurrentPanel={setCurrentPanel} patientAuth={auth} />\r\n          )}\r\n        </>\r\n      ) : (\r\n        <OnBoard\r\n          setHasOnboardedToTrue={() => {\r\n            setHasOnboardedLocalStorage(true);\r\n            setHasOnboarded(true);\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import { useEffect, useReducer, useState } from 'react';\r\nimport clsx from 'clsx';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\r\n\r\nimport LeftNav from '../LeftNav';\r\nimport {\r\n  AllPanelTypes,\r\n  PatientPayload,\r\n  ReceptionistPanelType,\r\n} from '../../interfaces';\r\nimport { Patient } from '../../models/Patient';\r\nimport patientReducer from '../../reducers/patient';\r\nimport questionaireReducer from '../../reducers/questionaire';\r\nimport {\r\n  createPatient,\r\n  deletePatient,\r\n  getPatients,\r\n  updatePatient,\r\n} from '../../actions/patient';\r\nimport PatientForm from '../common/PatientForm';\r\nimport {\r\n  clearQuestionaires,\r\n  getQuestionaires,\r\n  sendQuestionaires,\r\n} from '../../actions/questionaire';\r\nimport PatientsTable from '../common/PatientsTable';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    appRoot: {\r\n      display: 'flex',\r\n    },\r\n    toolbar: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'flex-end',\r\n      padding: theme.spacing(0, 1),\r\n      // necessary for content to be below app bar\r\n      ...theme.mixins.toolbar,\r\n    },\r\n    content: {\r\n      flexGrow: 1,\r\n      padding: theme.spacing(3),\r\n    },\r\n  })\r\n);\r\n\r\nfunction ReceptionistPage() {\r\n  const classes = useStyles();\r\n  const [panel, setPanel] = useState<ReceptionistPanelType>(\r\n    ReceptionistPanelType.PatientsTable\r\n  );\r\n  const [currentPatient, setCurrentPatient] = useState<Patient>();\r\n\r\n  const [patients, dispatch] = useReducer(patientReducer, []);\r\n  const [questionaires, questionairesDispatch] = useReducer(\r\n    questionaireReducer,\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    getPatients()(dispatch);\r\n  }, []);\r\n\r\n  const setPatient = async (\r\n    id: number | undefined,\r\n    patientPayload: PatientPayload,\r\n    questionairePayload: string[]\r\n  ) => {\r\n    let newPatient;\r\n    if (id) {\r\n      delete patientPayload.email;\r\n      await updatePatient(id, patientPayload)(dispatch);\r\n    } else {\r\n      newPatient = await createPatient(patientPayload)(dispatch);\r\n    }\r\n    await sendQuestionaires(\r\n      id ?? newPatient.id,\r\n      questionairePayload\r\n    )(questionairesDispatch);\r\n    setPanel(ReceptionistPanelType.PatientsTable);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={clsx({\r\n        [classes.appRoot]: true,\r\n      })}\r\n    >\r\n      <CssBaseline />\r\n      <LeftNav\r\n        role=\"receptionist\"\r\n        currentPanel={ReceptionistPanelType.PatientsTable}\r\n        setPanel={(panel: AllPanelTypes) =>\r\n          setPanel(panel as ReceptionistPanelType)\r\n        }\r\n      />\r\n      <main className={classes.content}>\r\n        {panel === ReceptionistPanelType.PatientsTable && (\r\n          <PatientsTable\r\n            patients={patients}\r\n            deletePatient={(patient: Patient) =>\r\n              deletePatient(patient)(dispatch)\r\n            }\r\n            openPatientForm={async (patient?: Patient) => {\r\n              setCurrentPatient(patient);\r\n              patient\r\n                ? await getQuestionaires(patient.id)(questionairesDispatch)\r\n                : clearQuestionaires()(questionairesDispatch);\r\n              setPanel(ReceptionistPanelType.PatientForm);\r\n            }}\r\n          />\r\n        )}\r\n        {panel === ReceptionistPanelType.PatientForm && (\r\n          <PatientForm\r\n            currentPatient={currentPatient}\r\n            setPatient={setPatient}\r\n            questionaires={questionaires}\r\n            openPatientsTablePage={() =>\r\n              setPanel(ReceptionistPanelType.PatientsTable)\r\n            }\r\n          />\r\n        )}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ReceptionistPage;\r\n","import {\r\n  BrowserRouter,\r\n  Redirect,\r\n  Route,\r\n  RouteProps,\r\n  Switch,\r\n} from 'react-router-dom';\r\n\r\nimport Login from './components/Login';\r\nimport PhysicianPage from './components/physician/PhysicianPage';\r\nimport useAuth from './hooks/useAuth';\r\nimport { RolesEnum } from './interfaces';\r\nimport { AuthContext, isValidRole } from './utils/loggedUser';\r\nimport AdminPage from './components/admin/AdminPage';\r\n\r\nimport './App.css';\r\nimport ManagerPage from './components/manager/ManagerPage';\r\nimport PatientPage from './components/patient/PatientPage';\r\nimport ReceptionistPage from './components/receptionist/ReceptionistPage';\r\n\r\nfunction App() {\r\n  const [auth, setAuth] = useAuth();\r\n\r\n  const currentRole = auth?.user?.roles[0] || 'PATIENT';\r\n  const defaultPath = isValidRole(currentRole)\r\n    ? `/${RolesEnum[currentRole]}`\r\n    : '/login';\r\n\r\n  function PrivateRoute({ children, ...rest }: RouteProps) {\r\n    return (\r\n      <Route\r\n        {...rest}\r\n        render={({ location }) =>\r\n          auth.token ? (\r\n            rest.path?.includes(defaultPath) ? (\r\n              children\r\n            ) : (\r\n              <Redirect to={defaultPath} />\r\n            )\r\n          ) : (\r\n            <Redirect\r\n              to={{\r\n                pathname: '/login',\r\n                state: { from: location },\r\n              }}\r\n            />\r\n          )\r\n        }\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <AuthContext.Provider value={[auth, setAuth]}>\r\n      <div className=\"App\">\r\n        <BrowserRouter>\r\n          <Switch>\r\n            <Route exact path=\"/login\">\r\n              <Login />\r\n            </Route>\r\n            <Route path=\"/login/patient/:clinic_id\">\r\n              <Login isPatient={true} />\r\n            </Route>\r\n            <Route exact path=\"/\">\r\n              <Redirect to={defaultPath} />\r\n            </Route>\r\n            <PrivateRoute path=\"/admin\">\r\n              <AdminPage />\r\n            </PrivateRoute>\r\n            <PrivateRoute path=\"/manager\">\r\n              <ManagerPage />\r\n            </PrivateRoute>\r\n            <PrivateRoute path=\"/physician\">\r\n              <PhysicianPage />\r\n            </PrivateRoute>\r\n            <PrivateRoute path=\"/receptionist\">\r\n              <ReceptionistPage />\r\n            </PrivateRoute>\r\n            <PrivateRoute path=\"/patient\">\r\n              <PatientPage />\r\n            </PrivateRoute>\r\n          </Switch>\r\n        </BrowserRouter>\r\n      </div>\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}